;;; $DOOMDIR/config.el -*- lemxical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Martin Barker"
      user-mail-address "martin@martindbarker.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-dracula)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; If you use `org' and don't want your org iles in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Emacs/1.Org")


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.




;; CUSTOM TODO states
(after! org
(setq org-todo-keywords
      '((sequence "TODO(t)"
         "PLANNING(p)"
         "IN-PROGRESS(i)"
         "GOAL(g)"
         "WAITING(w)"
         "WORK(b)"
         "HABIT(h)"
         "PROJECT(P)"
         "CALENDAR(c)"
         "|"
         "HOLD(h)"
         "SOMEDAY(s)"
         "WONT-DO(n)"
         "DONE(d!)")
        )))

;; CUSTOM TODO colors
(after! org
(setq org-todo-keyword-faces
      '(
        ("TODO" . (:foreground "gold" :weight bold))
        ("PLANNING" . (:foreground "dark violet" :weight bold))
        ("IN-PROGRESS" . (:foreground "DarkOrange" :weight bold))
        ("GOAL" . (:foreground "LimeGreen" :weight bold))
        ("VERIFYING/WAITING" . (:foreground "LightPink1" :weight bold))
        ("WORK" . (:foreground "Cyan" :weight bold))
        ("HABIT" . (:foreground "RoyalBlue3" :weight bold))
        ("WONT-DO" . (:foreground "Brown2" :weight bold))
        ("SOMEDAY" . (:foreground "cyan1" :weight bold))
        ("HOLD" . (:foreground "Grey46" :weight bold))
        ("Project" . (:foreground "SlateBlue1" :weight bold))
        ("CALENDAR" . (:foreground "chocolate" :weight bold))
        ("DONE" . (:foreground "white" :weight bold))
        )))

;; Tag colors
(setq org-tag-faces
      '(
        ("planning"  . (:foreground "mediumPurple1" :weight bold))
        ("@research"   . (:foreground "royalblue1"    :weight bold))
        ("QA"        . (:foreground "sienna"        :weight bold))
        ("CRITICAL"  . (:foreground "red1"          :weight bold))
        ("HABIT"  . (:foreground "pink"          :weight bold))
        )
      )


;;Creates a nice work log for me to capture to
(after! org
  (setq org-capture-templates
        '(
;; Add to inbox
          ("i" "INBOX"
        entry (file+datetree "~/Emacs/1.Org/INBOX.org" "INBOX")
         "* TODO %?"
         :empty-lines 0)
        ("n" "Personal Notes/Scatch Pad"
         entry (file+headline "~/Emacs/1.Org/NOTES.org" "Personal Notes")
         "** %?"
         :empty-lines 0)
;; To create work todos
        ("w" "Work-Todo"
         entry (file+datetree "~/Emacs/1.Org/WORK_TODO.org" "Work-TODO")
         "* WORK %?"
         :empty-lines 0)
;; To create work notes
        ("W" "Work-Notes"
         entry (file+datetree "~/Emacs/1.Org/WORK_TODO.org" "Work-Notes")
         "* NOTE %?"
         :empty-lines 0)
;; To create achievments todos
        ("a" "Achievments"
         entry (file+datetree "~~/Emacs/1.Org/1.NOTES/1.Personal/2.AchNGrat/ACHIEVMENTS.org" "Achievments")
          "* %?"
          :empty-lines 0)
;; Add to Gratitude Diary
        ("g" "Gratidude Diary"
         entry (file+datetree "~/Emacs/1.Org/1.NOTES/1.Personal/2.AchNGrat/GRATITUDE.org" "Gratitude Diary")
          "* %?"
          :empty-lines 0)
;; Daily Review
        ("d" "Daily Review"
         entry (file+datetree "~/Emacs/1.Org/1.NOTES/1.Personal/3.Reviews/1.Daily/1.DailyReviews.org" "Daily Reviews")
         "* Daily Review: %?

** What outcomes did I achieve today?

  1.

** How did these contribute to my larger outcomes?*

   -

** What made me happiest today?*

   -

** What have I given today?*

   -

** What did I learn today?*

   -

** How has today added to the quality of my life or how can I use today*

   -

** What could I have improved upon and done better?*

   -

** What action or plan can I put in place to improve the above moving forward?*

   -

** Who have I been in service of today?*

   -

** What can I be grateful for today?*

   -

** What is one small thing that is special about me?*

   -

** What did I do well today?*

   -

** Total of focused minutes? Or notes on hacking.*"
          :empty-lines 0)

 ;; Weekly Reviews
        ("R" "Weekly Review"
         entry (file+datetree "~/Emacs/1.Org/1.NOTES/1.Personal/3.Reviews/2.Weekly/1.WeeklyReviews.org" "Weekly Reviews")
         "* Weekly Review: %?


** Three things that are going well?

1.


** Three things that could improve?

1.


** What is one small thing I can do to improve the above?



** Note Completed outcomes/Goals (or not) and explain why.


1.

        - Complete or not: Complete

        - How/why not?

	- Can I replicate this moving forward if so how, if not why not?

        - Notes:

2.

        - Complete or not: Complete

        - How/why not?

	- Can I replicate this moving forward if so how, if not why not?

        - Notes:


3.

        - Complete or not: Complete

        - How/why not?

	- Can I replicate this moving forward if so how, if not why not?

        - Notes:




** Thoughts on the week? A few lines will suffice."

          :empty-lines 0)
       )))

;; New org agenda setup
;;;;;;;;;;;;;;;;;;;;;ORG CRYPT
;; ORG CRYPT TAG Setup for inline encryption
;; If I place "crypt" tag in any entry it will encrypt it.
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance '("crypt"))
;; GPG key to use for encryption
;; Either the Key ID or set to nil to use symmetric encryption.
(setq org-crypt-key "79EA004594BD7E09")
;; Set shortut to decrypt easier.
(map! :leader
      :desc "Org Decrypt Entry"
      "d e" #'org-decrypt-entry)

(use-package! org-super-agenda
  :after org-agenda
  :init
  (setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
     ;; org-agenda-block-separator nil
;;      org-agenda-compact-blocks t
      org-agenda-start-day nil ;; i.e. today
      org-agenda-span 1
      org-agenda-start-on-weekday nil)
  (setq org-agenda-custom-commands
        '(("c" "Super view"
                     ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "⏰⏰⏰⏰⏰ --- Today --- ⏰⏰⏰⏰⏰"
                          :discard (:todo "DONE")
                          :discard (:tag "habit")
                          :time-grid t
                          :date today
                          :todo "TODAY"
                          :scheduled today
                          :discard (:anything)
                          :order 1)))))
                      (alltodo "" ((org-agenda-overriding-header "CURRENT STATUS")
                                   (org-agenda-prefix-format "  %t  %s")
                         (org-super-agenda-groups
                          '((:log t)
                            (:name "⚠⚠⚠ --- MISSION CRITICAL TASKS --- ⚠⚠⚠"
                             :discard (:todo "DONE")
                             :tag "CRITICAL"
                             :order 2
                             :transformer (--> it
                                  (upcase it)
                                  (propertize it 'face '(:foreground "red1"))))
                            (:name " 🚧🚧🚧 --- ACTIVE PROJECT(s) --- 🚧🚧🚧 "
                             :todo "PROJECT"
                             :order 3
                             :transformer (--> it
                                  (upcase it)
                                  (propertize it 'face '(:foreground "SlateBlue1"))))
                            (:name "〰️〰️〰 --- Currently Working On --- 〰〰〰"
                                   :todo "IN-PROGRESS"
                                   :order 4)
                            (:name "❗❗❗ --- Important --- ❗❗❗"
                                   :discard (:todo "DONE")
                                   :priority "A"
                                   :date today
                                   :order 10)
                            (:name "✅✅✅ --- GOAL --- ✅✅✅"
                                   :todo "GOAL"
                                   :order 2
                                   :transformer (--> it
                                        (upcase it)
                                        (propertize it 'face '(:foreground "LimeGreen"))))
                            (:name "❌⚠❌ --- Overdue! --- ❌⚠❌"
                                   :discard (:todo "DONE")
                                   :deadline past
                                   :scheduled past
                                   :transformer (--> it
                                        (upcase it)
                                        (propertize it 'face '(:foreground "red")))
                                   :order 5)
                            (:name " 🏃‍🏃‍‍🏃 --- Errands --- 🏃‍🏃‍‍🏃"
                                   :and (:scheduled today :tag "Errands")
                                   :order 12)
                            (:name "⏲⏲⏲ --- Waiting --- ⏲⏲⏲"
                                   :todo "WAITING"
                                   :order 6)
                            (:name "🇧🇧🇧 --- 🇧abble --- 🇧🇧🇧"
                                   :and (:scheduled today :todo "BABBLE")
                                   :order 7)
                            (:name "📅 📅 📅 --- Calendar Events --- 📅 📅 📅"
                                   :and (:scheduled today :todo "CALENDAR")
                                   :order 19)
                            (:name "✔✔✔ --- HABIT --- ✔✔✔"
                                   :and (:scheduled today :tag "habit")
                                   :transformer (--> it
                                        (upcase it)
                                        (propertize it 'face '(:foreground "royalblue1")))
                                   :order 20)
            ;;                (:name "📅📅📅 --- Scheduled Soon --- 📅📅📅"
              ;;                     :scheduled future
               ;;                    :order 12)
                        ;; Show all other items
                           ;; (:discard (:not (:todo "TODO")))))))
                           (:discard (:anything))))))))))
  :config
  (org-super-agenda-mode))

;; Journal Config
(setq org-journal-dir "~/Emacs/1.Org/1.Personal/1.Journal/"
      org-journal-date-prefix "#+TITLE: "
      org-journal-time-prefix "* "
      org-journal-date-format "%a, %d-%m-%Y"
      org-journal-file-format "%d-%m-%Y-jrnl.org")


;; Enables auto tangling/exporting of code blocks to a unified code file form org mode.
;; It means I can jsut write code blocks in org with detailed documentation and this will export it all accordingly.
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))

;; Open neotree with (SPC t n) open dir with (SPC d n)
(after! neotree
  (setq neo-smart-open t
        neo-window-fixed-size nil))
(after! doom-themes
  (setq doom-neotree-enable-variable-pitch t))
(map! :leader
      :desc "Toggle neotree file viewer" "t n" #'neotree-toggle
      :desc "Open directory in neotree" "d n" #'neotree-dir)

;; Enables Emofis
(use-package emojify
  :hook (after-init . global-emojify-mode))

;; dired customizaion

(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired
        :desc "Dired view file" "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "Z") 'dired-do-compress
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-do-kill-lines
  (kbd "% l") 'dired-downcase
  (kbd "% m") 'dired-mark-files-regexp
  (kbd "% u") 'dired-upcase
  (kbd "* %") 'dired-mark-files-regexp
  (kbd "* .") 'dired-mark-extension
  (kbd "* /") 'dired-mark-directories
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))

;; Calendar
; https://stackoverflow.com/questions/9547912/emacs-calendar-show-more-than-3-months
(defun dt/year-calendar (&optional year)
  (interactive)
  (require 'calendar)
  (let* (
      (current-year (number-to-string (nth 5 (decode-time (current-time)))))
      (month 0)
      (year (if year year (string-to-number (format-time-string "%Y" (current-time))))))
    (switch-to-buffer (get-buffer-create calendar-buffer))
    (when (not (eq major-mode 'calendar-mode))
      (calendar-mode))
    (setq displayed-month month)
    (setq displayed-year year)
    (setq buffer-read-only nil)
    (erase-buffer)
    ;; horizontal rows
    (dotimes (j 4)
      ;; vertical columns
      (dotimes (i 3)
        (calendar-generate-month
          (setq month (+ month 1))
          year
          ;; indentation / spacing between months
          (+ 5 (* 25 i))))
      (goto-char (point-max))
      (insert (make-string (- 10 (count-lines (point-min) (point-max))) ?\n))
      (widen)
      (goto-char (point-max))
      (narrow-to-region (point-max) (point-max)))
    (widen)
    (goto-char (point-min))
    (setq buffer-read-only t)))

(defun dt/scroll-year-calendar-forward (&optional arg event)
  "Scroll the yearly calendar by year in a forward direction."
  (interactive (list (prefix-numeric-value current-prefix-arg)
                     last-nonmenu-event))
  (unless arg (setq arg 0))
  (save-selected-window
    (if (setq event (event-start event)) (select-window (posn-window event)))
    (unless (zerop arg)
      (let* (
              (year (+ displayed-year arg)))
        (dt/year-calendar year)))
    (goto-char (point-min))
    (run-hooks 'calendar-move-hook)))

(defun dt/scroll-year-calendar-backward (&optional arg event)
  "Scroll the yearly calendar by year in a backward direction."
  (interactive (list (prefix-numeric-value current-prefix-arg)
                     last-nonmenu-event))
  (dt/scroll-year-calendar-forward (- (or arg 1)) event))

(map! :leader
      :desc "Scroll year calendar backward" "<left>" #'dt/scroll-year-calendar-backward
      :desc "Scroll year calendar forward" "<right>" #'dt/scroll-year-calendar-forward)

(defalias 'year-calendar 'dt/year-calendar)

(use-package! calfw)
(use-package! calfw-org)

;; Markdown & line settings

(setq display-line-numbers-type t)
(map! :leader
      :desc "Comment or uncomment lines" "TAB TAB" #'comment-line
      (:prefix ("t" . "toggle")
       :desc "Toggle line numbers" "l" #'doom/toggle-line-numbers
       :desc "Toggle line highlight in frame" "h" #'hl-line-mode
       :desc "Toggle line highlight globally" "H" #'global-hl-line-mode
       :desc "Toggle truncate lines" "t" #'toggle-truncate-lines))

(custom-set-faces
 '(markdown-header-face ((t (:inherit font-lock-function-name-face :weight bold :family "variable-pitch"))))
 '(markdown-header-face-1 ((t (:inherit markdown-header-face :height 1.7))))
 '(markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.6))))
 '(markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.5))))
 '(markdown-header-face-4 ((t (:inherit markdown-header-face :height 1.4))))
 '(markdown-header-face-5 ((t (:inherit markdown-header-face :height 1.3))))
 '(markdown-header-face-6 ((t (:inherit markdown-header-face :height 1.2)))))

(defun dt/insert-todays-date (prefix)
  (interactive "P")
  (let ((format (cond
                 ((not prefix) "%A, %B %d, %Y")
                 ((equal prefix '(4)) "%m-%d-%Y")
                 ((equal prefix '(16)) "%Y-%m-%d"))))
    (insert (format-time-string format))))

(require 'calendar)
(defun dt/insert-any-date (date)
  "Insert DATE using the current locale."
  (interactive (list (calendar-read-date)))
  (insert (calendar-date-string date)))

;; Shortcut to insert date
(map! :leader
      (:prefix ("i d" . "Insert date")
        :desc "Insert any date" "a" #'dt/insert-any-date
        :desc "Insert todays date" "t" #'dt/insert-todays-date))

;; Uses clippty explain functionaility.
(map! :leader
      (:prefix ("c h" . "Help info from Clippy")
       :desc "Clippy describes function under point" "f" #'clippy-describe-function
       :desc "Clippy describes variable under point" "v" #'clippy-describe-variable))

;; Enables the use of centaur tabs

(setq centaur-tabs-set-bar 'over
      centaur-tabs-set-icons t
      centaur-tabs-gray-out-icons 'buffer
      centaur-tabs-height 24
      centaur-tabs-set-modified-marker t
      centaur-tabs-style "bar"
      centaur-tabs-modified-marker "•")
(map! :leader
      :desc "Toggle tabs globally" "t c" #'centaur-tabs-mode
      :desc "Toggle tabs local display" "t C" #'centaur-tabs-local-mode)
(evil-define-key 'normal centaur-tabs-mode-map (kbd "g <right>") 'centaur-tabs-forward        ; default Doom binding is 'g t'
                                               (kbd "g <left>")  'centaur-tabs-backward       ; default Doom binding is 'g T'
                                               (kbd "g <down>")  'centaur-tabs-forward-group
                                               (kbd "g <up>")    'centaur-tabs-backward-group)


;; Preview images in all org files on launch
(setq org-startup-with-inline-images t)
(beacon-mode 1)


;; EWW Web Browser
(setq browse-url-browser-function 'eww-browse-url)
(map! :leader
      :desc "Search web for text between BEG/END"
      "s w" #'eww-search-words
      (:prefix ("e" . "evaluate/ERC/EWW")
       :desc "Eww web browser" "w" #'eww
       :desc "Eww reload page" "R" #'eww-reload))


;;(setq org-roam-directory (file-truename "~/Emacs/1.Org/4.Roam/"))

;; Hide emphasis markers in text this means that MD and org syntax icons will not show
(setq org-hide-emphasis-markers t)

;;Customize ORG higlighting
;; this controls the color of bold, italic, underline, verbatim, strikethrough
(setq org-emphasis-alist
  '(("*" (bold :slant italic :weight black :foreground "DeepSkyBlue" )) ;; this make bold both italic and bold, but not color change
    ("/" (italic :foreground "dark salmon" )) ;; italic text, the text will be "dark salmon"
    ("_" underline :foreground "cyan" ) ;; underlined text, color is "cyan"
    ("=" (:background "PaleGreen1" :foreground "dim gray" )) ;; background of text is "snow1" and text is "deep slate blue"
    ("~" (:background "PaleGreen1" :foreground "dim gray" ))
    ("+" (:strike-through nil :foreground "dark orange" ))))

;; Used to open specific commonly used files
(map! :leader
      (:prefix ("=" . "open file")
       :desc "Edit TODO File" "t" #'(lambda () (interactive) (find-file "~/Emacs/1.Org/TODO.org"))
       :desc "Edit Hacking TODO File" "h" #'(lambda () (interactive) (find-file "~/Emacs/1.Org/HACKING.org"))
       :desc "Edit doom init.el" "i" #'(lambda () (interactive) (find-file "~/Emacs/1.Org/INBOX.org"))
       :desc "Edit WORK File" "w" #'(lambda () (interactive) (find-file "~/Emacs/1.Org/WORK_TODO.org"))
       :desc "Hacking Best tools Doc" "b" #'(lambda () (interactive) (find-file "~/Emacs/1.Org/1.NOTES/3.Hacking/__BestTools/1.BestTools.org"))))
       ;;:desc "Edit doom config.el" "c" #'(lambda () (interactive) (find-file "~/doom.d/config.el"))))
;(map! :leader
 ;     (:prefix ("= e" . "open eshell files")
  ;     :desc "Edit eshell aliases" "a" #'(lambda () (interactive) (find-file "~/.config/doom/eshell/aliases"))
   ;    :desc "Edit eshell profile" "p" #'(lambda () (interactive) (find-file "~/.config/doom/eshell/profile"))))
