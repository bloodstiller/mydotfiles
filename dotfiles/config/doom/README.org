#+TITLE: MDB Dev Doom Config
#+AUTHOR: MDB Dev
#+DESCRIPTION: MDB's Personal Doom Emacs Config.
#+PROPERTY: header-args :tangle /home/martin/Dropbox/90-99_Repos/92-PersonalRepos/92.01-Doom/config.el
#+auto_tangle: t
#+STARTUP: showeverything

* TABLE OF CONTENTS :TOC:
:PROPERTIES:
:ID:       b541533f-3271-4bc6-8dcb-bdd0dc44261b
:END:
- [[#about-this-config][ABOUT THIS CONFIG:]]
- [[#general-settings][General Settings:]]
  - [[#user-information][User Information:]]
  - [[#set-theme-and-line-numbers][Set Theme and line Numbers:]]
  - [[#graphics-pixel-precision-scrolling][Graphics: Pixel-precision scrolling:]]
- [[#fonts][Fonts:]]
- [[#bookmarks-and-buffers][BOOKMARKS AND BUFFERS]]
  - [[#bookmarks][Bookmarks]]
  - [[#buffers][Buffers]]
  - [[#keybindings-within-ibuffer-mode][Keybindings within ibuffer mode]]
  - [[#global-auto-revert][Global Auto Revert]]
- [[#org-mode][ORG MODE:]]
  - [[#org---org-directory][ORG - Org Directory:]]
  - [[#org---todo-states][ORG - Todo States:]]
  - [[#org---shortcuts-to-open-files][ORG - Shortcuts to Open Files:]]
  - [[#org---capture-templates][ORG - Capture Templates:]]
  - [[#org---import-md-to-org][ORG - Import MD to ORG:]]
  - [[#org---crypt-setup][ORG - CRYPT Setup:]]
  - [[#org---super-agenda][ORG - Super Agenda:]]
  - [[#org---journal][ORG - Journal:]]
  - [[#org---center-screenshortcut][ORG - Center ScreenShortcut:]]
  - [[#org---preview-images-in-all-files][ORG - Preview Images in all files:]]
  - [[#org---drag-and-drop-files-easily--attach][ORG - Drag and Drop Files Easily & Attach:]]
  - [[#org---set-attach-directory][ORG - Set ATTACH Directory:]]
  - [[#org---auto-tangle][ORG - Auto Tangle:]]
  - [[#org---cosmetics][ORG - Cosmetics:]]
  - [[#org---gtd-shortcuts][ORG - GTD Shortcuts:]]
  - [[#org---gtd-define-directory][ORG - GTD Define Directory:]]
  - [[#org---gtd-areas-of-focus][ORG - GTD Areas of Focus:]]
  - [[#org---start-all-documents-in-overview-mode][ORG - Start all documents in overview mode:]]
  - [[#org---add-id-to-all-org-headindgs-on-save][ORG - Add ID to all ORG headindgs on save:]]
  - [[#org---workspace-shortcuts][ORG - Workspace Shortcuts:]]
- [[#org---roam][ORG - ROAM:]]
  - [[#roam---location][Roam - Location:]]
  - [[#roam---integrate-markdown-files][Roam - Integrate Markdown Files:]]
  - [[#roam---make-git-ignored-files-in-subdirectories-still-searchable][Roam - (make git ignored files in subdirectories still searchable)]]
  - [[#roam---capture-templates][Roam - Capture Templates:]]
  - [[#roam---render-large-files-faster][Roam - Render Large Files Faster:]]
- [[#markdown][Markdown:]]
  - [[#markdown-line-numbers-display][Markdown: Line Numbers Display:]]
  - [[#markdown-set-custom-headers][Markdown: Set Custom Headers:]]
  - [[#markdown-functions-to-insert-date--calendar][Markdown: Functions To Insert Date & Calendar:]]
  - [[#markdown-functions-to-allow-markdown-preview-whilst-typing][Markdown: Functions To Allow Markdown preview whilst typing:]]
  - [[#markdown-keymaps][Markdown: Keymaps:]]
- [[#neotree-shortcuts][NeoTree Shortcuts:]]
- [[#dired-customization][Dired Customization:]]
  - [[#basic-dired-commands][Basic dired commands]]
- [[#quality-of-life][Quality Of Life:]]
  - [[#save-easier][Save Easier:]]
  - [[#search-easier][Search Easier:]]
  - [[#remove-line-numbers-to-speed-up-scrolling][Remove line numbers to speed up scrolling:]]
  - [[#use-vim-keybindings-to-move-between-windows-around][Use VIM Keybindings to move between windows around:]]
  - [[#emacs-everywhere][Emacs Everywhere:]]
  - [[#zoom-in--out][Zoom In & Out:]]
  - [[#enable-emojis][Enable Emojis]]
  - [[#insert-date-shortcut][Insert Date Shortcut:]]
  - [[#enable-centaur-tabs][Enable CENTAUR Tabs:]]
  - [[#beacon][Beacon:]]
  - [[#calendar][Calendar:]]
  - [[#multivterm-setup][MultiVterm Setup:]]
  - [[#golden-ratio-mode][Golden Ratio Mode:]]
- [[#floating-frames][Floating Frames:]]

* ABOUT THIS CONFIG:
:PROPERTIES:
:ID:       45cba343-2440-4a1d-a839-fdeebea985d3
:END:
This is my personal Doom Emacs config.

Doom Emacs is a distribution of Emacs that uses the "evil" keybindings (Vim keybindings) and includes a number of nice extensions and a bit of configuration out of the box.  I am maintaining this config not just for myself, but also for those that want to explore some of what is possible with Emacs.  I will add a lot of examples of plugins and settings, some of them I may not even use personally.

- /Alot of this is lifted from DT Tube but with my own customization etc./ However please check out his config and videos https://gitlab.com/dwt1/distro.tube

* General Settings:
:PROPERTIES:
:ID:       553f0eaf-80e3-4469-935c-e5170383929e
:END:
** User Information:
:PROPERTIES:
:ID:       f90ccfeb-6d1d-4a63-8f3d-5d50eb92c69f
:END:
#+begin_src emacs-lisp
(setq user-full-name "MDBDEVIO")
#+end_src

** Set Theme and line Numbers:
:PROPERTIES:
:ID:       18a53005-4942-4a48-a723-e2cc16ab8548
:END:
#+begin_src emacs-lisp
;;Select my preffered theme:
(setq doom-theme 'doom-dracula)
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
#+end_src
** Graphics: Pixel-precision scrolling:
:PROPERTIES:
:ID:       9f605124-95d4-4246-88aa-bf1a4bd38edc
:END:
#+begin_src emacs-lisp
(when (version< "29.0.50" emacs-version)
  (pixel-scroll-precision-mode))
#+end_src
* Fonts:
:PROPERTIES:
:ID:       d62adafd-65fc-4a25-aad9-9a96ab7d7e82
:END:
Settings related to fonts within Doom Emacs:

  - ‘doom-font’ – standard monospace font that is used for most things in Emacs.
  - ‘doom-variable-pitch-font’ – variable font which is useful in some Emacs plugins.
  - ‘doom-big-font’ – used in doom-big-font-mode; useful for presentations.
  - ‘font-lock-comment-face’ – for comments.
  - ‘font-lock-keyword-face’ – for keywords with special significance like ‘setq’ in elisp.

#+begin_src emacs-lisp
; Set preffered fonts:
(setq doom-font (font-spec :family "JetBrains Mono" :size 20)
      doom-variable-pitch-font (font-spec :family "JetBrains Mono" :size 15)
      doom-big-font (font-spec :family "JetBrains Mono" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

* BOOKMARKS AND BUFFERS
:PROPERTIES:
:ID:       40af9b48-1c3a-4a6c-a76e-36645ec2c333
:END:
Doom Emacs uses 'SPC b' for keybindings related to bookmarks and buffers.

** Bookmarks
:PROPERTIES:
:ID:       71ba80a9-22e3-4934-9706-2aa05e0aadf4
:END:
Bookmarks are somewhat like registers in that they record positions you can jump to.  Unlike registers, they have long names, and they persist automatically from one Emacs session to the next. The prototypical use of bookmarks is to record where you were reading in various files.

| COMMAND         | DESCRIPTION                            | KEYBINDING |
|-----------------+----------------------------------------+------------|
| list-bookmarks  | _List bookmarks_                         | SPC b L    |
| bookmark-set    | _Set bookmark_                           | SPC b m    |
| bookmark-delete | _Delete bookmark_                        | SPC b M    |
| bookmark-save   | _Save current bookmark to bookmark file_ | SPC b w    |

#+BEGIN_SRC emacs-lisp
;;Setup Bookmarks
(setq bookmark-default-file "/home/martin/Dropbox/90-99_Repos/92-PersonalRepos/92.01-Doom/bookmarks")

(map! :leader
      (:prefix ("b". "buffer")
       :desc "List bookmarks"                          "L" #'list-bookmarks
       :desc "Set bookmark"                            "m" #'bookmark-set
       :desc "Delete bookmark"                         "M" #'bookmark-set
       :desc "Save current bookmarks to bookmark file" "w" #'bookmark-save))
#+END_SRC

** Buffers
:PROPERTIES:
:ID:       db998fe8-01b0-4a9d-95af-b7d05eb9c3f7
:END:
Regarding buffers, the text you are editing in Emacs resides in an object called a buffer. Each time you visit a file, a buffer is used to hold the file’s text. Each time you invoke Dired, a buffer is used to hold the directory listing.  Ibuffer is a program that lists all of your Emacs buffers/, allowing you to navigate between them and filter them.

| COMMAND         | DESCRIPTION          | KEYBINDING |
|-----------------+----------------------+------------|
| ibuffer         | _Launch ibuffer_       | SPC b i    |
| kill-buffer     | _Kill current buffer_  | SPC b k    |
| next-buffer     | _Goto next buffer_     | SPC b n    |
| previous-buffer | _Goto previous buffer_ | SPC b p    |
| save-buffer     | _Save current buffer_  | SPC b s    |

** Keybindings within ibuffer mode
:PROPERTIES:
:ID:       a3d611b3-548c-4c06-bb67-2695b6062e64
:END:
| COMMAND                           | DESCRIPTION                            | KEYBINDING |
|-----------------------------------+----------------------------------------+------------|
| ibuffer-mark-forward              | _Mark the buffer_                        | m          |
| ibuffer-unmark-forward            | _Unmark the buffer_                      | u          |
| ibuffer-do-kill-on-deletion-marks | _Kill the marked buffers_                | x          |
| ibuffer-filter-by-content         | _Ibuffer filter by content_              | f c        |
| ibuffer-filter-by-directory       | _Ibuffer filter by directory_            | f d        |
| ibuffer-filter-by-filename        | _Ibuffer filter by filename (full path)_ | f f        |
| ibuffer-filter-by-mode            | _Ibuffer filter by mode_                 | f m        |
| ibuffer-filter-by-name            | _Ibuffer filter by name_                 | f n        |
| ibuffer-filter-disable            | _Disable ibuffer filter_                 | f x        |
| ibuffer-do-kill-lines             | _Hide marked buffers_                    | g h        |
| ibuffer-update                    | _Restore hidden buffers_                 | g H        |

#+begin_src emacs-lisp
(evil-define-key 'normal ibuffer-mode-map
  (kbd "f c") 'ibuffer-filter-by-content
  (kbd "f d") 'ibuffer-filter-by-directory
  (kbd "f f") 'ibuffer-filter-by-filename
  (kbd "f m") 'ibuffer-filter-by-mode
  (kbd "f n") 'ibuffer-filter-by-name
  (kbd "f x") 'ibuffer-filter-disable
  (kbd "g h") 'ibuffer-do-kill-lines
  (kbd "g H") 'ibuffer-update)
#+end_src

** Global Auto Revert
:PROPERTIES:
:ID:       f2f913de-6630-41fa-98a6-161c56929db5
:END:
A buffer can get out of sync with respect to its visited file on disk if that file is changed by another program. To keep it up to date, you can enable Auto Revert mode by typing M-x auto-revert-mode, or you can set it to be turned on globally with 'global-auto-revert-mode'.  I have also turned on Global Auto Revert on non-file buffers, which is especially useful for 'dired' buffers.

#+begin_src emacs-lisp
;;Global Auto Revert
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
#+end_src

* ORG MODE:
:PROPERTIES:
:ID:       e29c8aff-47e4-4b4d-b794-b2cd4726466d
:END:
- This is where the vast majority of my customization lies. As I live mostly in ORG Mode.


** ORG - Org Directory:
:PROPERTIES:
:ID:       76e97e74-4782-42b9-9d0b-070f7917ffab
:END:
#+begin_src emacs-lisp
;; If you use `org' and don't want your org iles in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "/home/martin/Dropbox/01-09_System/01-Emacs/01.02-OrgGtd/")

(setq org-agenda-files '("/home/martin/Dropbox/01-09_System/01-Emacs/01.02-OrgGtd/inbox.org"
                         "/home/martin/Dropbox/01-09_System/01-Emacs/01.02-OrgGtd/org-gtd-tasks.org"
                         "/home/martin/Dropbox/01-09_System/01-Emacs/01.02-OrgGtd/gtd_archive_2023"))
#+end_src

** ORG - Todo States:
:PROPERTIES:
:ID:       f0b68567-17a7-4ff9-9f4e-694a7be21747
:END:
Custom TODO states & Tags
#+begin_src emacs-lisp
;; CUSTOM org TODO states
(after! org
(setq org-todo-keywords
      '((sequence "TODO(t)"
         "NEXT(n)"
         "PLANNING(p)"
         "IN-PROGRESS(i)"
         "WEEKLY-GOAL(m)"
         "GOAL(g)"
         "WAITING(w)"
         "WORK(b)"
         "HABIT(h)"
         "PROJECT(P)"
         "CALENDAR(c)"
         "NOTE(N)"
         "AREA(a)"
         "|"
         "DONE(d!)"
         "COMPLETE(C!)"
         "HOLD(h)"
         "SOMEDAY(s)"
         "RABBITHOLE!(R)")
        )))

;; CUSTOM TODO colors
(after! org
(setq org-todo-keyword-faces
      '(
        ("TODO" . (:foreground "#ffdd83" :weight bold))
        ("NEXT" . (:foreground "light coral" :weight bold))
        ("PLANNING" . (:foreground "#bd7091" :weight bold))
        ("IN-PROGRESS" . (:foreground "#ffb86c" :weight bold))
        ("WEEKLY-GOAL" . (:foreground "light sea green" :weight bold))
        ("GOAL" . (:foreground "LimeGreen" :weight bold))
        ("WAITING" . (:foreground "LightPink1" :weight bold))
        ("WORK" . (:foreground "Cyan" :weight bold))
        ("HABIT" . (:foreground "RoyalBlue3" :weight bold))
        ("PROJECT" . (:foreground "SlateBlue1" :weight bold))
        ("CALENDAR" . (:foreground "chocolate" :weight bold))
        ("NOTE" . (:foreground "#7d9dc0" :background "#ffb86c" :weight bold))
        ("AREA" . (:foreground "#7d9dc0" :weight bold))

        ("DONE" . (:foreground "white" :weight bold))
        ("COMPLETE" . (:strikethrough t :foreground "light gray" :weight bold))
        ("HOLD" . (:foreground "Grey46" :weight bold))
        ("SOMEDAY" . (:foreground "cyan1" :weight bold))
        )))

;; Custom Tag colors
(setq org-tag-faces
      '(
        ("planning"  . (:foreground "mediumPurple1" :weight bold))
        ("@research"   . (:foreground "royalblue1"    :weight bold))
        ("QA"        . (:foreground "sienna"        :weight bold))
        ("CRITICAL"  . (:foreground "red1"          :weight bold))
        ("HABIT"  . (:foreground "pink"          :weight bold))
        )
      )
#+end_src


** ORG - Shortcuts to Open Files:
:PROPERTIES:
:ID:       745563d5-468d-4272-a8d3-f38418349513
:END:

Keybindings to open files that I work with all the time using the find-file command, which is the interactive file search that opens with ~'C-x C-f'~ in GNU Emacs or ~'SPC f f'~ in Doom Emacs.

These keybindings use find-file non-interactively since we specify exactly what file to open.  The format I use for these bindings is ~'SPC ='~ plus ~'key'~ since Doom Emacs does not use ~'SPC ='~.

_NOTE_: Doom Emacs already has a function 'doom/open-private-config' set to the keybinding 'SPC f p'.  This allows you to open any file in your HOME/.config/doom directory, so the following keybindings that I created are not really necessary, but I created this section as an example of how to to create bindings that open specific files on your system.

| PATH TO FILE                                                     | DESCRIPTION                  | KEYBINDING |
|------------------------------------------------------------------+------------------------------+------------|
| ~/Emacs/Org/org-gtd-tasks.org                                    | Opens TODO file              | SPC = t    |
| ~/Emacs/Org/inbox.org                                            | Edit inbox file              | SPC = i    |
| ~/Emacs/Org/Goals.org                                            | Edit Goals file              | SPC = g    |
|------------------------------------------------------------------+------------------------------+------------|
| ~/Emacs/Repos/Personal/dotfiles/doom.d/config.org                | Edit doom Config.el          | SPC = d c  |
| ~/Emacs/Repos/Personal/dotfiles/doom.d/init.el                   | Edit doom Init.el            | SPC = d i  |
| ~/Emacs/Repos/Personal/dotfiles/doom.d/packages.el               | Edit doom Packages.el        | SPC = d p  |
|------------------------------------------------------------------+------------------------------+------------|
| ~/Emacs/Blog                                                     | Open Blog Root Folder        | SPC = b r  |
| ~/Emacs/Blog/Index.org                                           | Edit Index.org file          | SPC = b i  |
| ~/Emacs/Blog/Articles/Blog.org                                   | Edit Blog.org file           | SPC = b b  |
| ~/Emacs/Blog/Articles/Emacs.org                                  | Edit Emacs.org file          | SPC = b e  |
| ~/Emacs/Blog/Articles/Infosec.org                                | Edit Infosec.org file        | SPC = b I  |
|------------------------------------------------------------------+------------------------------+------------|
| ~/Emacs/Brain/1.Projects                                         | Open Projects Folder         | SPC = p p  |
| ~/Emacs/Brain/2.Areas                                            | Open Areas Folder            | SPC = p a  |
| ~/Emacs/Brain/3.Resources                                        | Open Resources Folder        | SPC = p r  |
| ~/Emacs/Brain/4.Archives                                         | Open Archives Folder         | SPC = p a  |
| ~/Emacs/Brain/_Inbox                                             | Open Inbox Folder            | SPC = p i  |
|------------------------------------------------------------------+------------------------------+------------|
| ~/Emacs/Brain/3.Resources/Pentesting/__BestTools/1.BestTools.org | Edit Hacking Best Tools File | SPC = h b  |
| ~/Emacs/Brain/3.Resources/Pentesting/                            | Hacking Root Folder          | SPC = h r  |
| ~/Emacs/Org/HACKING.org                                          | Edit Hacking org file        | SPC = h t  |
| ~/Emacs/Brain/3.Resources/Pentesting/2.CTFS/                     | Open Hacking CTF's Directory | SPC = h c  |
|------------------------------------------------------------------+------------------------------+------------|


#+begin_src emacs-lisp
;; Used to open specific commonly used files

(map! :leader
      (:prefix ("=" . "open file")
       :desc "Edit TODO File" "t" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/01-09_System/01-Emacs/01.02-OrgGtd/org-gtd-tasks.org"))
       :desc "Edit Goals File"   "g" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/01-09_System/01-Emacs/01.02-OrgGtd/Goals.org"))
       :desc "Edit inbox File" "i" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/01-09_System/01-Emacs/01.02-OrgGtd/inbox.org"))))
     ;  :desc "Edit WORK File" "w" #'(lambda () (interactive) (find-file "~/Emacs/Org/WORK_TODO.org"))
    ; :desc "Edit LINKS File" "l" #'(lambda () (interactive) (find-file "~/Emacs/Brain/_inbox/LINKS.org"))
     ;  :desc "Edit Repeating File" "r" #'(lambda () (interactive) (find-file "~/Emacs/Org/REPEATING.org"))))
(map! :leader
      (:prefix ("= d" . "Open Doom Files")
       :desc "Edit Doom config.el"   "c" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/90-99_Repos/92-PersonalRepos/92.01-Doom/README.org"))
       :desc "Edit Doom init.el"   "i" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/90-99_Repos/92-PersonalRepos/92.01-Doom/init.el"))
       :desc "Edit Doom packages.el"   "p" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/90-99_Repos/92-PersonalRepos/92.01-Doom/packages.el"))))
(map! :leader
      (:prefix ("= b" . "Open Blog Files")
       :desc "Open Blog Root Folder"   "r" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/40-49_Career/44-Blog"))
       :desc "Edit Index.org file"   "i" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/40-49_Career/44-Blog/index.org"))
       :desc "Edit Blog.org file"   "b" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/40-49_Career/44-Blog/Articles/Blog.org"))
       :desc "Edit Emacs.org file"   "e" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/40-49_Career/44-Blog/Emacs.org"))
       :desc "Edit Infosec.org file"   "I" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/40-49_Career/44-Blog/Infosec.org"))))
(map! :leader
      (:prefix ("= p" . "Open areas/Projects")
       :desc "Open Projects Folder" "p" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/00Projects"))
       :desc "Open Systems Folder" "0" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/01-09_System"))
       :desc "Open Health Folder" "1" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/10-19_Health"))
       :desc "Open Home Folder" "2" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/20-29_Home"))
       :desc "Open Relationships Folder" "3" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/30-39_Relationships"))
       :desc "Open Career Folder" "4" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/40-49_Career"))
       :desc "Open Personal Development Folder" "5" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/50-59_PersonalDevelopment"))
       :desc "Open Work Folder" "6" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/60-69_Work"))
       :desc "Open Finances Folder" "7" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/70-79_Finances"))
       :desc "Open Hobbies Folder" "8" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/80-89_Hobbies"))
       :desc "Open Repos Folder" "9" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/90-99_Repos"))))
(map! :leader
      (:prefix ("= h" . "Open Hacking Files")
       :desc "Open Hacking CTF's Directory"   "c" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/40-49-Career/46-Boxes/"))
       ;;:desc "Open Hacking root Folder" "r" #'(lambda () (interactive) (find-file "~/Emacs/Brain/3.Resources/Pentesting/"))
       ;;:desc "Open Hacking Org File" "t" #'(lambda () (interactive) (find-file "~/Emacs/Org/HACKING.org"))
       :desc "Hacking Best tools Doc" "b" #'(lambda () (interactive) (find-file "/home/martin/Dropbox/40-49-Career/47-Pentesting_Resources/47.01 Best Tools/1.BestTools.org"))))
#+end_src

** ORG - Capture Templates:
:PROPERTIES:
:ID:       cd327890-2976-4665-a569-0c35b85a9e66
:END:
#+begin_src emacs-lisp

;;Org capture templates;
(after! org
  (setq org-capture-templates
        '(
;; Add to inbox
          ("i" "inbox"
        entry (file+headline "/home/martin/Dropbox/01-09_System/01-Emacs/01.02-OrgGtd/inbox.org" "inbox")
         "* TODO %?"
         :empty-lines 0)
;; Add notes to inbox:
        ("n" "Personal Notes/Scatch Pad"
         entry (file+headline "/home/martin/Dropbox/01-09_System/01-Emacs/01.01-OrgMode/ScrathPad.org" "Personal Notes")
         "** %?"
         :empty-lines 0)
;; To create work todos
        ;("w" "Work-Todo"
        ; entry (file+headline "~/Emacs/Org/WORK_TODO.org" "Work-TODO")
        ; "* WORK %?"
        ; :empty-lines 0)
        ("w" "Work-Todo" entry (file "/home/martin/Dropbox/01-09_System/01-Emacs/01.02-OrgGtd/inbox.org")
         "* WORK %?"
         :empty-lines 1)
;; To create work notes
        ("W" "Work-Note" entry (file "/home/martin/Dropbox/01-09_System/01-Emacs/01.02-OrgGtd/inbox.org")
         "* NOTE %?"
         :empty-lines 0)
;; To create achievments todos
        ("a" "Achievments"
         entry (file+datetree "/home/martin/Dropbox/50-59_PersonalDevelopment/51-Diaries/51.04-Achievments_Diary/ACHIEVMENTS.org" "Achievments")
          "* %?"
          :empty-lines 0)
;; Add to Gratitude Diary
        ("g" "Gratidude Diary"
         entry (file+datetree "/home/martin/Dropbox/50-59_PersonalDevelopment/51-Diaries/51.03-Gratititude_Diary/GRATITUDE.org" "Gratitude Diary")
          "* %?"
          :empty-lines 0)
;; Add to Links Document:
        ("l" "Links" entry (file "/home/martin/Dropbox/01-09_System/01-Emacs/01.02-OrgGtd/inbox.org")
          "* LINK %?"
         :empty-lines 0)
 ;; Weekly Reviews
        ("R" "Weekly Review"
         entry (file+datetree "/home/martin/Dropbox/50-59_PersonalDevelopment/52-Reviews/52.02 Weekly Reviews/WeeklyReviews.org" "Weekly Reviews")
         "* %?"
          :empty-lines 0)
       )))
#+end_src

#+RESULTS:
| i | inbox                     | entry | (file+headline /home/martin/Dropbox/01-09_System/01-Emacs/01.02-OrgGtd/inbox.org inbox)    | * TODO %? | :empty-lines | 0 |
| n | Personal Notes/Scatch Pad | entry | (file+headline ~/Emacs/Org/NOTES.org Personal Notes)                                       | ** %?     | :empty-lines | 0 |
| w | Work-Todo                 | entry | (file /home/martin/Dropbox/01-09_System/01-Emacs/01.02-OrgGtd/inbox.org)                   | * WORK %? | :empty-lines | 1 |
| W | Work-Note                 | entry | (file /home/martin/Dropbox/01-09_System/01-Emacs/01.02-OrgGtd/inbox.org)                   | * NOTE %? | :empty-lines | 0 |
| a | Achievments               | entry | (file+datetree ~/Emacs/Brain/2.Areas/PersonalDevelopment/ACHIEVMENTS.org Achievments)      | * %?      | :empty-lines | 0 |
| g | Gratidude Diary           | entry | (file+datetree ~/Emacs/Brain/2.Areas/PersonalDevelopment/GRATITUDE.org Gratitude Diary)    | * %?      | :empty-lines | 0 |
| l | Links                     | entry | (file /home/martin/Dropbox/01-09_System/01-Emacs/01.02-OrgGtd/inbox.org)                   | * LINK %? | :empty-lines | 0 |
| R | Weekly Review             | entry | (file+datetree ~/Emacs/Brain/2.Areas/PersonalDevelopment/WeeklyReviews.org Weekly Reviews) | * %?      | :empty-lines | 0 |

** ORG - Import MD to ORG:
:PROPERTIES:
:ID:       f6a7442c-737c-4b8e-8da1-b06e7a9e8144
:END:

#+begin_src emacs-lisp
;; $DOOMDIR/config.el
;;(use-package! org-pandoc-import :after org)
#+end_src

** ORG - CRYPT Setup:
:PROPERTIES:
:ID:       0e74d2c4-a7b1-4469-9bee-10ae9613bec9
:END:

#+begin_src emacs-lisp
;;;;;;;;;;;;;;;;;;;;;ORG CRYPT
;; ORG CRYPT TAG Setup for inline encryption
;; If I place "crypt" tag in any entry it will encrypt it.
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance '("crypt"))
;; GPG key to use for encryption
;; Either the Key ID or set to nil to use symmetric encryption.
(setq org-crypt-key nil)
;; Set shortut to decrypt easier.
(map! :leader
      :desc "Org Decrypt Entry"
      "d e" #'org-decrypt-entry)
#+end_src

** ORG - Super Agenda:
:PROPERTIES:
:ID:       e043934f-1004-4a7a-9c78-34fc47d62806
:END:

#+begin_src emacs-lisp

;; Org super agenda setup:
 (use-package! org-super-agenda
   :after org-agenda
   :init
   (setq org-agenda-skip-scheduled-if-done t
       org-agenda-skip-deadline-if-done t
       org-agenda-include-deadlines t
       org-agenda-start-day nil ;; i.e. today
       org-agenda-span 1
       org-agenda-start-on-weekday nil)
   (setq org-agenda-custom-commands
         '(("c" "Super view"
                      ((agenda "" ((org-agenda-span 'day)
                       (org-super-agenda-groups
                        '((:name "⏰⏰⏰⏰⏰ --- Today --- ⏰⏰⏰⏰⏰"
                           :discard (:todo "DONE")
                           :discard (:tag "habit")
                           :time-grid t
                           :date today
                           :todo "TODAY"
                           :scheduled today
                           :discard (:anything)
                           :order 1)))))
                       (alltodo "" ((org-agenda-overriding-header "CURRENT STATUS")
                                    (org-agenda-prefix-format "  %t  %s")
                          (org-super-agenda-groups
                           '((:log t)
                             (:name " 🚧🚧🚧 --- ACTIVE PROJECT(s) --- 🚧🚧🚧 "
                              :todo "PROJECT"
                              :order 6
                              :transformer (--> it
                                   (upcase it)
                                   (propertize it 'face '(:foreground "SlateBlue1"))))
                             (:name "〰️〰️〰 --- Currently Working On --- 〰〰〰"
                                    :todo "IN-PROGRESS"
                                    :order 4)
                             (:name "❗❗❗ --- Important --- ❗❗❗"
                                    :date today
                                    :discard (:todo "DONE")
                                    :priority "A"
                                    :order 10)
                             (:name "✅✅✅ --- GOAL --- ✅✅✅"
                                    :todo "GOAL"
                                    :order 2
                                    :transformer (--> it
                                         (upcase it)
                                         (propertize it 'face '(:foreground "LimeGreen"))))
                             (:name "✅✅✅ --- WEEKLY-GOALS --- ✅✅✅"
                                    :todo "WEEKLY-GOAL"
                                    :order 3
                                    :transformer (--> it
                                         (upcase it)
                                         (propertize it 'face '(:foreground "light sea green"))))
                             (:name "❌⚠❌ --- Overdue! --- ❌⚠❌"
                                    :discard (:todo "DONE")
                                    :deadline past
                                    :scheduled past
                                    :transformer (--> it
                                         (upcase it)
                                         (propertize it 'face '(:foreground "red")))
                                    :order 5)
                             (:name "🇧🇧🇧 --- WORK --- 🇧🇧🇧"
                                    :and (:tag "WORK" :todo "WORK")
                                    :order 9)
                             (:name "✔✔✔ --- HABIT --- ✔✔✔"
                                    :and (:scheduled today :tag "habit")
                                    :transformer (--> it
                                         (upcase it)
                                         (propertize it 'face '(:foreground "royalblue1")))
                                    :order 20)
                            (:discard (:anything))))))))))
   :config
   (org-super-agenda-mode))

#+end_src

** ORG - Journal:
:PROPERTIES:
:ID:       c0c33dfb-75ff-42bf-8a6d-a1d77790f6c8
:END:
#+begin_src emacs-lisp

;; Journal Config
(setq org-journal-dir "/home/martin/Dropbox/50-59_PersonalDevelopment/51-Diaries/51.01-Daily_Diaries"
      org-journal-date-prefix "#+TITLE: "
      org-journal-time-prefix "* "
      org-journal-date-format "%a, %d-%m-%Y"
      org-journal-file-format "%d-%m-%Y-jrnl.org")

#+end_src
** ORG - Center ScreenShortcut:
:PROPERTIES:
:ID:       885acf83-e163-4c82-a4e4-3936f5c6634f
:END:
#+begin_src emacs-lisp
(map! :leader
      :desc "recenter-top-bottom"
      "s c" #'recenter-top-bottom)

#+end_src

** ORG - Preview Images in all files:
:PROPERTIES:
:ID:       f553677a-4491-4c6f-815f-5fe86c2c7bf9
:END:
#+begin_src emacs-lisp
;; Preview images in all org files on launch
(setq org-startup-with-inline-images t)
;;Adjust images to an actual size that doesn't take up the entire screen.
(setq org-image-actual-width 600)

#+end_src

** ORG - Drag and Drop Files Easily & Attach:
:PROPERTIES:
:ID:       cfc78081-d49a-43db-8163-8f182d59d9b1
:END:
#+begin_src emacs-lisp
; This still does not work (unsure why)
(require 'org-download)
(setq-default org-download-image-dir "/home/martin/Dropbox/screenshots/")
;;Allows dropping to dir-ed
(add-hook 'dired-mode-hook 'org-download-enable)

#+end_src

** ORG - Set ATTACH Directory:
:PROPERTIES:
:ID:       1c5ee3a0-b4bc-49df-9086-52337c770f97
:END:
#+begin_src emacs-lisp
;; Actually Set ATTACH directory where images are stored
(setq org-attach-directory "/home/martin/Dropbox/screenshots/")
#+end_src

** ORG - Auto Tangle:
:PROPERTIES:
:ID:       abe65ea9-84ae-4813-a26c-3d92835a6d32
:END:

- By adding this ~#+PROPERTY: header-args :tangle /Directory/name_of_file.extension~ to any org file I can output the code block contents to the specified location.

#+begin_src emacs-lisp

;; Enables auto tangling/exporting of code blocks to a unified code file form org mode.
;; It means I can jsut write code blocks in org with detailed documentation and this will export it all accordingly.
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))

#+end_src

** ORG - Cosmetics:
:PROPERTIES:
:ID:       d2397cc9-f813-473e-9bab-c1559c7c4801
:END:
*** Cosmetics - Export with smart quotes:
:PROPERTIES:
:ID:       b1d5ffa4-9843-4b35-bd8e-66586ae4ce92
:END:
I use custom smart quotes so this helps me have them remain when exporting.
#+begin_src emacs-lisp
;; Export using my custom smart quotes.
(setq org-export-with-smart-quotes t)
#+end_src

*** Cosmetics - Hide Emphasis Markers:
:PROPERTIES:
:ID:       628eec6c-1afa-438a-bd7d-f6044a8990d0
:END:
This means that the markers used for emphasis will no longer be visible and instead just the outcome.

#+begin_src emacs-lisp

;; Hide emphasis markers in text this means that MD and org syntax icons will not show
;; effectively acts as preview.

(after! org
(setq org-hide-emphasis-markers t))

#+end_src

*** Cosmetics - Colour Configuration:
:PROPERTIES:
:ID:       f3932cf6-e0f3-49e7-ab03-dc105a59ed6c
:END:
#+begin_src emacs-lisp

;;Customize ORG higlighting
;; this controls the color of bold, italic, underline, verbatim, strikethrough

(after! org
(setq org-emphasis-alist
    ;; Purple Bold & Underline Brighter purple
  '(("*" (underline :weight black :foreground "#A061F9" ))
    ;; Red text highligted in yellow (important)
    ("/" (:weight black :background "#FF5555" :foreground "#F1FA8C" ))
    ;; Blue
    ("_" (:weight black :foreground "#79c6ff" ))
    ;;Higlighter  brighter yellow
    ("=" (underline :weight black :foreground "#F1FA8C" ))
    ;; Code block
    ("~" (:background "#6BB86B" :foreground "#575a71" ))
    ;; Red = Important red
    ("+" (underline bold :weight italic :foreground "#FF5555" )))))
    ;;("+" (bold :strike-through nil :foreground "#ffb86c" #cd5c5c )))))

#+end_src

*** Cosmetics - Headline Bullets and Folds:
:PROPERTIES:
:ID:       801b5f53-05e7-4ca6-a193-c3525b8d7f33
:END:
- Not needed due to org modern, but retaining incase I need to revert
#+begin_src emacs-lisp
;;Change how bullets look
;; Original ones nicked from org-bullets
;;(setq org-superstar-headline-bullets-list
;;  '(
;;    ?◉
;;    ?○
;;    ?✸
;;    ?▷))

(setq org-superstar-headline-bullets-list '("› "))
#+end_src

*** Cosmetics - Item Bullets:
:PROPERTIES:
:ID:       17b3ea4d-35d1-4850-9402-0316d1469cf2
:END:

#+begin_src emacs-lisp

;; Custom bulleted list
(setq org-superstar-item-bullet-alist '((?* . ?⋆)
                                        (?+ . ?‣)
                                        (?- . ?•)))
#+end_src

*** Cosmetics - Dropdown Icon:
:PROPERTIES:
:ID:       e52b4479-8c54-4516-92a4-71d3b3ce6a3b
:END:
#+begin_src emacs-lisp
;; Custom drop down icon.
;; Not needed due to modern
(setq org-ellipsis " ⯯")
#+end_src

*** Cosmetics - Ligatures:
:PROPERTIES:
:ID:       603b1fff-d06a-4693-a20a-c441a0d817c7
:END:
- Stolen from https://github.com/elken/doom
#+begin_src emacs-lisp
(setq-hook! org-mode
  prettify-symbols-alist '(("#+end_quote" . "”")
                           ("#+END_QUOTE" . "”")
                           ("#+begin_quote" . "“")
                           ("#+BEGIN_QUOTE" . "“")
                           ("#+end_src" . "«")
                           ("#+END_SRC" . "«")
                           ("#+begin_src" . "»")
                           ("#+BEGIN_SRC" . "»")
                           ("#+name:" . "»")
                           ("#+NAME:" . "»")))
#+end_src

*** Cosmetics - Indent Content under Headings:
:PROPERTIES:
:ID:       f5188c3b-c984-4637-aa9d-01e5828397d2
:END:
#+begin_src emacs-lisp
(setq org-adapt-indentation t)
#+end_src
*** Cosmetics - Indent All Org Files:
:PROPERTIES:
:ID: f055195a-06c5-4eba-a98b-382c1901de26
:END:
#+begin_src emacs-lisp
(require 'org-indent)
(setq org-startup-indented t)
#+end_src
*** Cosmetics - Modern:
:PROPERTIES:
:ID: 480811fe-1546-4a71-a33b-c45c290efd66
:END:
- Disabled for now
#+begin_src emacs-lisp
;(with-eval-after-load 'org (global-org-modern-mode))
;;; Minimal UI
;(package-initialize)
;(menu-bar-mode -1)
;(tool-bar-mode -1)
;(scroll-bar-mode -1)
;
;
;(setq
 ;;; Edit settings
 ;org-auto-align-tags nil
 ;org-tags-column 0
 ;org-catch-invisible-edits 'show-and-error
 ;org-special-ctrl-a/e t
 ;org-insert-heading-respect-content t
;
 ;;; Org styling, hide markup etc.
 ;org-hide-emphasis-markers t
 ;org-pretty-entities t
 ;org-ellipsis " ⯯"
;
 ;;; Agenda styling
 ;org-agenda-tags-column 0
 ;org-agenda-block-separator ?─
 ;org-agenda-time-grid
 ;'((daily today require-timed)
   ;(800 1000 1200 1400 1600 1800 2000)
   ;" ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
 ;org-agenda-current-time-string
 ;"⭠ now ─────────────────────────────────────────────────")
;
;;Sets it on globally
;;(global-org-modern-mode)

#+end_src

** ORG - GTD Shortcuts:
:PROPERTIES:
:ID:       3aeed176-7493-4336-b0c4-2f4d9f38c7fd
:END:
#+begin_src emacs-lisp
;Org GTD
;;(use-package! org-gtd :after org)
;(after! org
;(use-package! org-gtd
;  :config
;  (setq org-edna-use-inheritance t)
;  (org-edna-mode)
;  (map! :leader
;        (:prefix ("d" . "org-gtd")
;         :desc "Capture"        "c"  #'org-gtd-capture
;         :desc "Engage"         "e"  #'org-gtd-engage
;         :desc "Process inbox"  "i"  #'org-gtd-process-inbox
;         :desc "Process item"   "p"  #'org-gtd-clarify-item
;         :desc "Organize"       "o"  #'org-gtd-organize
;         :desc "Archive"       "A"   #'org-gtd-archive-item-at-point
;         :desc "Show all next"  "n"  #'org-gtd-show-all-next
;         :desc "Set Area of Focus on item"  "a"  #'org-gtd-area-of-focus-set-on-item-at-point
;         :desc "Review Area of Focus"  "r"  #'org-gtd-review-area-of-focus
;         :desc "Refile Task"  "R"  #'org-refile
;         :desc "Stuck projects" "s"  #'org-gtd-review-stuck-projects))
;  (map! :map org-gtd-clarify-map
;        :desc "Organize this item" "C-c c" #'org-gtd-organize)))
#+end_src

** ORG - GTD Define Directory:
:PROPERTIES:
:ID:       9f7e9473-0aaf-4ae7-8105-a45e9a7f59f2
:END:
#+begin_src emacs-lisp
;(setq org-gtd-directory "/home/martin/Dropbox/01-09_System/01-Emacs/01.02-OrgGtd")
#+end_src

** ORG - GTD Areas of Focus:
:PROPERTIES:
:ID:       14f97865-67f7-40aa-9ffc-2d75defb6cae
:END:
#+begin_src emacs-lisp
;(setq org-gtd-areas-of-focus '("Home" "Health" "Career" "Finance" "Goal" "Systems" "Relationships" "Personal Development"))
#+end_src

** ORG - Start all documents in overview mode:
:PROPERTIES:
:ID:       fa1c25e1-02c7-45f1-92ff-8c9e2a474e25
:END:
#+begin_src emacs-lisp
;ORG - Start all documents in overview mode:
; I have large org files with lots of nested headings, this makes it less cumbersome.
(setq org-startup-folded t)

#+end_src

** ORG - Add ID to all ORG headindgs on save:
:PROPERTIES:
:ID:       d646dd8f-c35f-4058-a9ac-26fb8ec0e5ab
:END:

#+begin_src emacs-lisp
;ORG - Add ID to all ORG headindgs on save:
(add-hook 'org-capture-prepare-finalize-hook 'org-id-get-create)
(defun my/org-add-ids-to-headlines-in-file ()
;  "Add ID properties to all headlines in the current file which
;do not already have one."
  (interactive)
  (org-map-entries 'org-id-get-create))
(add-hook 'org-mode-hook
          (lambda ()
            (add-hook 'before-save-hook 'my/org-add-ids-to-headlines-in-file nil 'local)))
#+end_src
** ORG - Workspace Shortcuts:
:PROPERTIES:
:ID:       24f8b799-06e3-4490-a99f-efe0ed851a80
:END:
- To match tmux shortcuts
#+begin_src emacs-lisp
;;(map!
     ;;:prefix "SPACE-TAB"
     ;;"C-n" #'+workspace/new
     ;;"C-x" #'+workspace/delete
     ;;"C-p" #'+workspace:/switch-next
     ;;"C-o" #'+workspace:/switch-previous)
#+end_src

* ORG - ROAM:
:PROPERTIES:
:ID:       d2fc4b3c-393e-4a18-a03c-2cf3dcd7c11d
:END:
** Roam - Location:
:PROPERTIES:
:ID:       2f17e7b4-9201-4924-ae58-d7be6a5b6894
:END:
#+begin_src emacs-lisp
;Roam Main Dir
(require 'org-roam)
(setq org-roam-directory "~/Dropbox")

#+end_src
** Roam - Integrate Markdown Files:
:PROPERTIES:
:ID:       125eaf04-552a-4e28-8589-f15a687d758d
:END:
#+begin_src emacs-lisp
(use-package! md-roam
  :config
  (setq org-roam-file-extensions '("org" "md"))
  (setq md-roam-file-extension "md")
  (org-roam-db-autosync-mode 1) ; autosync-mode triggers db-sync. md
  (setq org-roam-title-sources '((mdtitle title mdheadline headline) (mdalias alias))))
#+end_src


** Roam - (make git ignored files in subdirectories still searchable)
:PROPERTIES:
:ID:       d248366b-fa72-457c-abba-d0ef83e8a540
:END:
#+begin_src emacs-lisp
; Roam - (make git ignored files in subdirectories still searchable)
(after! org-roam
  (setq org-roam-list-files-commands '(find fd fdfind rg)))

#+end_src
** Roam - Capture Templates:
:PROPERTIES:
:ID:       0b82e2bd-d707-4757-97bf-8c912fce2043
:END:
#+begin_src emacs-lisp
;Roam - Capture Templates:
(setq org-roam-capture-templates
'(("d" "default" plain
      "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
  ("s" "Service" plain
  (file "/home/martin/Dropbox/01-09_System/04-Templates/ServiceTemplate.org")
  :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
  :unnarrowed t)
 ("t" "Tool" plain
  (file "/home/martin/Dropbox/01-09_System/04-Templates/ToolTemplate.org")
  :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
  :unnarrowed t)
 ("m" "Method" plain
  (file "/home/martin/Dropbox/01-09_System/04-Templates/MethodTemplate.org")
  :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
  :unnarrowed t)
 ("a" "Attack Type" plain
  (file "/home/martin/Dropbox/01-09_System/04-Templates/AttackTemplate.org")
  :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
  :unnarrowed t)
 ("A" "Application" plain
  (file "/home/martin/Dropbox/01-09_System/04-Templates/Application.org")
  :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
  :unnarrowed t)
 ("c" "CPTS Module" plain
  (file "/home/martin/Dropbox/01-09_System/04-Templates/CPTSSection.org")
  :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
  :unnarrowed t)
 ("p" "Start Project" plain
  (file "/home/martin/Dropbox/01-09_System/04-Templates/ProjectStartTemplate.org")
  :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
  :unnarrowed t)
 ("P" "End Project" plain
  (file "/home/martin/Dropbox/01-09_System/04-Templates/ProjectEndTemplate.org")
  :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
  :unnarrowed t)
 ("b" "Box" plain
  (file "/home/martin/Dropbox/01-09_System/04-Templates/BoxTemplate.org")
  :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
  :unnarrowed t)))
#+end_src
** Roam - Render Large Files Faster:
:PROPERTIES:
:ID:       7160b423-b9b2-4244-bc8f-2d392e3bb157
:END:
- Taken from: https://github.com/org-roam/org-roam/issues/2399
:PROPERTIES:
:ID:       de5b649e-05c0-482c-acae-b664dcd3870c
:END:
#+begin_src emacs-lisp
(defun vr/org-roam-buffer-render-contents-advice (orig-fun &rest args)
  (let ((org-startup-indented nil))
    (apply orig-fun args)))
(advice-add 'org-roam-buffer-render-contents :around #'vr/org-roam-buffer-render-contents-advice)
#+end_src

* Markdown:
:PROPERTIES:
:ID:       fb90e51d-e4eb-43cc-8bcf-3970bf57e8a2
:END:
- Why have MD customization when I have org. Sometimes when writing reports this is the best option as it's compatible accross the board and doesn't require exporting, which with my custom org markers can be cumbersome.
** Markdown: Line Numbers Display:
:PROPERTIES:
:ID:       1cd30d6b-d28b-4f79-a426-423874dc4d30
:END:
#+begin_src emacs-lisp
;; Markdown & line settings
(setq display-line-numbers-type t)
(map! :leader
      :desc "Comment or uncomment lines" "TAB TAB" #'comment-line
      (:prefix ("t" . "toggle")
       :desc "Toggle line numbers" "l" #'doom/toggle-line-numbers
       :desc "Toggle line highlight in frame" "h" #'hl-line-mode
       :desc "Toggle line highlight globally" "H" #'global-hl-line-mode
       :desc "Toggle truncate lines" "t" #'toggle-truncate-lines))
#+end_src
** Markdown: Set Custom Headers:
:PROPERTIES:
:ID:       ebc51896-42f8-4d70-bba9-6dc4d2123d93
:END:

#+begin_src emacs-lisp
;Markdown: Set Custom Headers:
(custom-set-faces!
 ;; Headers
'(markdown-header-delimiter-face :foreground "#616161" :height 0.9)
'(markdown-header-face-1 :height 1.8 :foreground "#FF79C6" :weight extra-bold :inherit markdown-header-face)
'(markdown-header-face-2 :height 1.4 :foreground "#BD93F9" :weight extra-bold :inherit markdown-header-face)
'(markdown-header-face-3 :height 1.2 :foreground "#D4B8FB" :weight extra-bold :inherit markdown-header-face)
'(markdown-header-face-4 :height 1.15 :foreground "#FFA7D9" :weight bold :inherit markdown-header-face)
'(markdown-header-face-5 :height 1.1 :foreground "#E4D3FC" :weight bold :inherit markdown-header-face)
'(markdown-header-face-6 :height 1.05 :foreground "#5e81ac" :weight semi-bold :inherit markdown-header-face)

;;; Custom bold etc
'(markdown-code-face :background "#6BB86B" :foreground "#575a71")
'(markdown-line-break-face :weight extra-black :foreground "#79c6ff")
'(markdown-italic-face :weight black :foreground "#79c6ff")
'(markdown-list-face :weight black :foreground "#BD93F9")
'(markdown-bold-face :weight black :foreground "#A061F9"))
#+end_src

** Markdown: Functions To Insert Date & Calendar:
:PROPERTIES:
:ID:       2a30c269-af20-43db-afe7-60be10426de6
:END:
#+begin_src emacs-lisp
;Markdown: Functions To Insert Date & Calendar:
(defun dt/insert-todays-date (prefix)
  (interactive "P")
  (let ((format (cond
                 ((not prefix) "%A, %B %d, %Y")
                 ((equal prefix '(4)) "%m-%d-%Y")
                 ((equal prefix '(16)) "%Y-%m-%d"))))
    (insert (format-time-string format))))

(require 'calendar)
(defun dt/insert-any-date (date)
  "Insert DATE using the current locale."
  (interactive (list (calendar-read-date)))
  (insert (calendar-date-string date)))


#+end_src
** Markdown: Functions To Allow Markdown preview whilst typing:
:PROPERTIES:
:ID:       4e16c322-0c20-4d06-b4ca-6cadd0622c6a
:END:
#+begin_src emacs-lisp
;; Enables markdown preview whilst creating doc.
 (defvar nb/current-line '(0 . 0)
   "(start . end) of current line in current buffer")
 (make-variable-buffer-local 'nb/current-line)

 (defun nb/unhide-current-line (limit)
   "Font-lock function"
   (let ((start (max (point) (car nb/current-line)))
         (end (min limit (cdr nb/current-line))))
     (when (< start end)
       (remove-text-properties start end
                       '(invisible t display "" composition ""))
       (goto-char limit)
       t)))

 (defun nb/refontify-on-linemove ()
   "Post-command-hook"
   (let* ((start (line-beginning-position))
          (end (line-beginning-position 2))
          (needs-update (not (equal start (car nb/current-line)))))
     (setq nb/current-line (cons start end))
     (when needs-update
       (font-lock-fontify-block 3))))

 (defun nb/markdown-unhighlight ()
   "Enable markdown concealling"
   (interactive)
   (markdown-toggle-markup-hiding 'toggle)
   (font-lock-add-keywords nil '((nb/unhide-current-line)) t)
   (add-hook 'post-command-hook #'nb/refontify-on-linemove nil t))

;; Toggles on for all MD docs. Remove to turn off.
 (add-hook 'markdown-mode-hook #'nb/markdown-unhighlight)

;; Enable code block syntax highlight
 (setq markdown-enable-highlighting-syntax t)

;; Enable wiki links in all md files by default:
 (setq markdown-enable-wiki-links t)

#+end_src
** Markdown: Keymaps:
:PROPERTIES:
:ID:       f8a304da-3296-4fde-984f-c163db4f9307
:END:
#+begin_src emacs-lisp
; Make emacs auto indent when we create a new list item.
(setq markdown-indent-on-enter 'indent-and-new-item)
#+end_src

* NeoTree Shortcuts:
:PROPERTIES:
:ID:       30bcb5ac-2e52-4abe-9b4e-2b093a85960b
:END:

Neotree is a file tree viewer.  When you open neotree, it jumps to the current file thanks to neo-smart-open.  The neo-window-fixed-size setting makes the neotree width be adjustable.  Doom Emacs had no keybindings set for neotree.  Since Doom Emacs uses 'SPC t' for 'toggle' keybindings, I used 'SPC t n' for toggle-neotree.


| COMMAND        | DESCRIPTION               | KEYBINDING |
|----------------+---------------------------+------------|
| neotree-toggle | _Toggle neotree_            | SPC t n    |
| neotree- dir   | _Open directory in neotree_ | SPC d n    |

#+begin_src emacs-lisp

;; Open neotree with (SPC t n) open dir with (SPC d n)
(after! neotree
  (setq neo-smart-open t
        neo-window-fixed-size nil))
(after! doom-themes
  (setq doom-neotree-enable-variable-pitch t))
(map! :leader
      :desc "Toggle neotree file viewer" "t n" #'neotree-toggle
      :desc "Open directory in neotree" "d n" #'neotree-dir)

#+end_src

* Dired Customization:
:PROPERTIES:
:ID:       5b9e95af-6dea-4f5e-a6ce-eeae4e7f5e34
:END:
** Basic dired commands
:PROPERTIES:
:ID:       ead0bc64-2b15-4961-8376-5d927207109d
:END:

| COMMAND                | DESCRIPTION                                 | KEYBINDING |
|------------------------+---------------------------------------------+------------|
| dired-view-file        | _View file in dired_                          | SPC d v    |
| dired-up-directory     | _Go up in directory tree_                     | h          |
| dired-find-file        | _Go down in directory tree (or open if file)_ | l          |
| dired-next-line        | _Move down to next line_                      | j          |
| dired-previous-line    | _Move up to previous line_                    | k          |
| dired-mark             | _Mark file at point_                          | m          |
| dired-unmark           | _Unmark file at point_                        | u          |
| dired-do-copy          | _Copy current file or marked files_           | C          |
| dired-do-rename        | _Rename current file or marked files_         | R          |
| dired-hide-details     | _Toggle detailed listings on/off_             | (          |
| dired-git-info-mode    | _Toggle git information on/off_               | )          |
| dired-create-directory | _Create new empty directory_                  | +          |
| dired-diff             | _Compare file at point with another_          | =          |
| dired-subtree-toggle   | _Toggle viewing subtree at point_             | TAB        |


#+begin_src emacs-lisp

;; dired customizaion

(map! :leader
      (:prefix ("D" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "D p" #'peep-dired
        :desc "Dired view file" "D v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "Z") 'dired-do-compress
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-do-kill-lines
  (kbd "% l") 'dired-downcase
  (kbd "% m") 'dired-mark-files-regexp
  (kbd "% u") 'dired-upcase
  (kbd "* %") 'dired-mark-files-regexp
  (kbd "* .") 'dired-mark-extension
  (kbd "* /") 'dired-mark-directories
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))

#+end_src
* Quality Of Life:
:PROPERTIES:
:ID:       9738f0a2-351e-4da6-a97b-cc4951baa6be
:END:
** Save Easier:
:PROPERTIES:
:ID:       a75ea2ec-7719-4c6a-9748-85a7ff4c5305
:END:
- Stolen from https://github.com/elken/doom
#+begin_src emacs-lisp
;Back to a simpler time…
(map! :g "C-s" #'save-buffer)
#+end_src
** Search Easier:
:PROPERTIES:
:ID:       4d3c1652-3dd3-42ae-b5d6-b0c80f14cf9e
:END:
- Stolen from https://github.com/elken/doom
#+begin_src emacs-lisp
; Search easily
(map! :after evil :gnvi "C-f" #'consult-line)
#+end_src
** Remove line numbers to speed up scrolling:
:PROPERTIES:
:ID:       3ce5efb1-e81d-46bf-a121-deeb239ccf9d
:END:
#+begin_src shell
(setq display-line-numbers-type nil)
#+end_src
** Use VIM Keybindings to move between windows around:
:PROPERTIES:
:ID:       c1aaf0ec-2036-4be9-b2ea-dc2a2e6a19a3
:END:

- These match my TMUX configs

| COMMAND           | DESCRIPTION           | KEYBINDING |
|-------------------+-----------------------+------------|
| evil-window-Left  | Move One Window Left  | C-h        |
| evil-window-down  | Move One Window Down  | C-j        |
| evil-window-up    | Move One Window Up    | C-k        |
| evil-window-right | Move One Window Right | C-l        |

#+begin_src emacs-lisp
;Use VIM Keybindings to move between windows:
(define-key evil-motion-state-map (kbd "C-h") #'evil-window-left)
(define-key evil-motion-state-map (kbd "C-j") #'evil-window-down)
(define-key evil-motion-state-map (kbd "C-k") #'evil-window-up)
(define-key evil-motion-state-map (kbd "C-l") #'evil-window-right)
#+end_src
** Emacs Everywhere:
:PROPERTIES:
:ID:       7bd2fc2b-ddd8-4f93-84e6-691d7aea86ef
:END:
- Required for browser integration
#+begin_src emacs-lisp
(atomic-chrome-start-server)
#+end_src

** Zoom In & Out:
:PROPERTIES:
:ID:       a8225754-e2fb-40dd-b44e-12455616f8d5
:END:
#+begin_src emacs-lisp
; Zoom in and Out easily
(defun my/increase-text-height ()
  (interactive)
  (text-scale-increase 1))

(defun my/decrease-text-height ()
  (interactive)
  (text-scale-decrease 1))

(global-set-key (kbd "C-=") 'my/increase-text-height)
(global-set-key (kbd "C--") 'my/decrease-text-height)
#+end_src

** Enable Emojis
:PROPERTIES:
:ID:       d555b53b-459b-485a-8c57-94e5ffd2f1cf
:END:
Emojify is an Emacs extension to display emojis. It can display github style emojis like :smile: or plain ascii ones like :).

#+begin_src emacs-lisp

;; Enables Emofis
(use-package emojify
  :hook (after-init . global-emojify-mode))

#+end_src

** Insert Date Shortcut:
:PROPERTIES:
:ID:       f1f8fa34-9690-41d2-90b6-22903507573f
:END:
Some custom functions to insert the date.  The function 'insert-todays-date' can be used one of three different ways: (1) just the keybinding without the universal argument prefix, (2) with one universal argument prefix, or (3) with two universal argument prefixes.  The universal argument prefix is 'SPC-u' in Doom Emacs (C-u in standard GNU Emacs).  The function 'insert-any-date' only outputs to one format, which is the same format as 'insert-todays-date' without a prefix.

| COMMAND               | EXAMPLE OUTPUT              | KEYBINDING            |
|-----------------------+-----------------------------+-----------------------|
| dt/insert-todays-date |Friday, November 19, 2021     | SPC i d t             |
| dt/insert-todays-date |11-19-2021                   | SPC u SPC i d t       |
| dt/insert-todays-date |2021-11-19                   | SPC u SPC u SPC i d t |
| dt/insert-any-date    |Friday, November 19, 2021    | SPC i d a             |

#+begin_src emacs-lisp
;insert date shortcut
; Taken from dt/distro-tube.
(defun dt/insert-todays-date (prefix)
  (interactive "P")
  (let ((format (cond
                 ((not prefix) "%A, %B %d, %Y")
                 ((equal prefix '(4)) "%m-%d-%Y")
                 ((equal prefix '(16)) "%Y-%m-%d"))))
    (insert (format-time-string format))))

(require 'calendar)
(defun dt/insert-any-date (date)
  "Insert DATE using the current locale."
  (interactive (list (calendar-read-date)))
  (insert (calendar-date-string date)))

(map! :leader
      (:prefix ("i d" . "Insert date")
        :desc "Insert any date"    "a" #'dt/insert-any-date
        :desc "Insert todays date" "t" #'dt/insert-todays-date))
#+end_src

** Enable CENTAUR Tabs:
:PROPERTIES:
:ID:       e3b2e96d-3b72-48f6-8dba-c7819e23c41c
:END:
To use tabs in Doom Emacs, be sure to uncomment "tabs" in Doom's init.el.  Displays tabs at the top of the window similar to tabbed web browsers such as Firefox.  I don't actually use tabs in Emacs.  I placed this in my config to help others who may want tabs.  In the default configuration of Doom Emacs, 'SPC t' is used for "toggle" keybindings, so I choose 'SPC t c' to toggle centaur-tabs.  The "g" prefix for keybindings is used for a bunch of evil keybindings in Doom, but "g" plus the arrow keys were not used, so I thought I would bind those for tab navigation.  But I did leave the default "g t" and "g T" intact if you prefer to use those for centaur-tabs-forward/backward.

| COMMAND                     | DESCRIPTION               | KEYBINDING       |
|-----------------------------+---------------------------+------------------|
| centaur-tabs-mode           | Toggle tabs globally      | SPC t c          |
| centaur-tabs-local-mode     | Toggle tabs local display   | SPC t C          |
| centaur-tabs-forward        | Next tab                    | g <right> or g t |
| centaur-tabs-backward       | Previous tab                | g <left> or g T  |
| centaur-tabs-forward-group  | Next tab group              | g <down>         |
| centaur-tabs-backward-group | Previous tab group          | g <up>           |

#+begin_src emacs-lisp
;Centaur Tabs:
;;(setq centaur-tabs-set-bar 'over
      ;;centaur-tabs-set-icons t
      ;;centaur-tabs-gray-out-icons 'buffer
      ;;centaur-tabs-height 24
      ;;centaur-tabs-set-modified-marker t
      ;;centaur-tabs-style "bar"
      ;;centaur-tabs-modified-marker "•")
;;(map! :leader
      ;;:desc "Toggle tabs globally" "t c" #'centaur-tabs-mode
      ;;:desc "Toggle tabs local display" "t C" #'centaur-tabs-local-mode)
;;(evil-define-key 'normal centaur-tabs-mode-map (kbd "g <right>") 'centaur-tabs-forward        ; default Doom binding is 'g t'
;;
                                               ;;(kbd "g <left>")  'centaur-tabs-backward       ; default Doom binding is 'g T'
                                               ;;(kbd "g <down>")  'centaur-tabs-forward-group
                                               ;;(kbd "g <up>")    'centaur-tabs-backward-group)
#+end_src

** Beacon:
:PROPERTIES:
:ID:       c2f8ec18-84bb-4079-85a8-17157bb2478b
:END:
Never lose your cursor.  When you scroll, your cursor will shine!  This is a global minor-mode. Turn it on everywhere with:

#+begin_src emacs-lisp
(beacon-mode 1)
#+end_src

** Calendar:
:PROPERTIES:
:ID:       3dc5b650-f7fa-4df0-b922-f5c710b9e7cf
:END:
#+begin_src emacs-lisp

;; Calendar
; https://stackoverflow.com/questions/9547912/emacs-calendar-show-more-than-3-months
(defun dt/year-calendar (&optional year)
  (interactive)
  (require 'calendar)
  (let* (
      (current-year (number-to-string (nth 5 (decode-time (current-time)))))
      (month 0)
      (year (if year year (string-to-number (format-time-string "%Y" (current-time))))))
    (switch-to-buffer (get-buffer-create calendar-buffer))
    (when (not (eq major-mode 'calendar-mode))
      (calendar-mode))
    (setq displayed-month month)
    (setq displayed-year year)
    (setq buffer-read-only nil)
    (erase-buffer)
    ;; horizontal rows
    (dotimes (j 4)
      ;; vertical columns
      (dotimes (i 3)
        (calendar-generate-month
          (setq month (+ month 1))
          year
          ;; indentation / spacing between months
          (+ 5 (* 25 i))))
      (goto-char (point-max))
      (insert (make-string (- 10 (count-lines (point-min) (point-max))) ?\n))
      (widen)
      (goto-char (point-max))
      (narrow-to-region (point-max) (point-max)))
    (widen)
    (goto-char (point-min))
    (setq buffer-read-only t)))

(defun dt/scroll-year-calendar-forward (&optional arg event)
  "Scroll the yearly calendar by year in a forward direction."
  (interactive (list (prefix-numeric-value current-prefix-arg)
                     last-nonmenu-event))
  (unless arg (setq arg 0))
  (save-selected-window
    (if (setq event (event-start event)) (select-window (posn-window event)))
    (unless (zerop arg)
      (let* (
              (year (+ displayed-year arg)))
        (dt/year-calendar year)))
    (goto-char (point-min))
    (run-hooks 'calendar-move-hook)))

(defun dt/scroll-year-calendar-backward (&optional arg event)
  "Scroll the yearly calendar by year in a backward direction."
  (interactive (list (prefix-numeric-value current-prefix-arg)
                     last-nonmenu-event))
  (dt/scroll-year-calendar-forward (- (or arg 1)) event))

(map! :leader
      :desc "Scroll year calendar backward" "<left>" #'dt/scroll-year-calendar-backward
      :desc "Scroll year calendar forward" "<right>" #'dt/scroll-year-calendar-forward)

(defalias 'year-calendar 'dt/year-calendar)

(use-package! calfw)
(use-package! calfw-org)

#+end_src

** MultiVterm Setup:
:PROPERTIES:
:ID:       da7e817d-777c-49cc-b762-35c2fac946b1
:END:
#+begin_src emacs-lisp
(use-package! multi-vterm
  :after vterm)
#+end_src
** Golden Ratio Mode:
:PROPERTIES:
:ID:       ce292ade-4d83-4ff8-ae9e-d46d3d7c8dfc
:END:
Splits windows in such a way that it gives more space to the current window. More intuitive way of creating windows in Emacs.
#+begin_src emacs-lisp
;(use-package! golden-ratio)
;(golden-ratio-mode 1)
;(setq golden-ratio-auto-scale t)
#+end_src
* Floating Frames:
:PROPERTIES:
:ID:       d74a20c0-7aeb-49f1-b908-689bc3cd28e6
:END:
#+begin_src emacs-lisp
;;(require 'mini-frame)
;;(mini-frame-mode 1)
;;(setq mini-frame-detach-on-hide t)
;;;;(setq mini-frame-standalone 't)
;;(setq mini-frame-show-parameters
      ;;'((top . 0.7)
        ;;(width . 0.8)
        ;;(height . 0.8)
        ;;(left . 0.5)))
#+end_src
